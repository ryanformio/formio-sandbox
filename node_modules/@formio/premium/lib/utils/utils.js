var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as _ from 'lodash';
import fetchProviders from '../providers/fetch';
import { Utils as FormioUtils, Formio } from 'formiojs';
export var baseEditFetchComponents = function (extands) {
    if (extands === void 0) { extands = []; }
    var components = [
        {
            type: 'select',
            input: true,
            weight: 0,
            tooltip: 'The source to get the data. You can fetch from a URL or use javascript to get the value.',
            key: 'dataSrc',
            defaultValue: 'url',
            label: 'Data Source Type',
            dataSrc: 'values',
            data: {
                values: _.chain(fetchProviders)
                    .filter(function (provider) { return provider.availableToSourceOptions; })
                    .map(function (provider) { return ({ label: provider.displayName, value: provider.key }); })
                    .value()
            },
        },
        {
            type: 'checkbox',
            input: true,
            weight: 9,
            key: 'indexeddb.fromExisting',
            label: 'Choose from existing databases?',
            defaultValue: false,
            tooltip: 'Check it if you want to select an existing database.',
            conditional: {
                json: {
                    in: [{ var: 'data.dataSrc' }, ['indexeddb']],
                },
            },
        },
        {
            type: 'textfield',
            weight: 10,
            input: true,
            key: 'indexeddb.database',
            label: 'Database name',
            forceOverride: true,
            tooltip: 'The name of the indexeddb database.',
            conditional: {
                json: {
                    and: [
                        {
                            in: [{ var: 'data.dataSrc' }, ['indexeddb']],
                        },
                        {
                            '!==': [{ var: 'data.indexeddb.fromExisting' }, true],
                        },
                    ],
                },
            },
        },
        {
            type: 'textfield',
            input: true,
            key: 'indexeddb.table',
            label: 'Table name',
            forceOverride: true,
            weight: 16,
            tooltip: 'The name of table in the indexeddb database.',
            conditional: {
                json: {
                    and: [
                        {
                            in: [{ var: 'data.dataSrc' }, ['indexeddb']],
                        },
                        {
                            '!==': [{ var: 'data.indexeddb.fromExisting' }, true],
                        },
                    ],
                },
            },
        },
        {
            type: 'select',
            input: true,
            key: 'indexeddb.database',
            label: 'Existing Database name',
            weight: 10,
            tooltip: 'The name of the existing indexeddb database.',
            dataSrc: 'custom',
            valueProperty: 'value',
            skipMerge: true,
            data: {
                custom: function (context) {
                    if (!window.indexedDB) {
                        window.alert("Your browser doesn't support current version of indexedDB");
                        return [];
                    }
                    var values = window.indexedDB.databases()
                        .then(function (res) { return res.map(function (_a) {
                        var name = _a.name;
                        return ({ value: name, label: name });
                    }); });
                    return values;
                },
            },
            conditional: {
                json: {
                    '===': [{ var: 'data.indexeddb.fromExisting' }, true],
                },
            },
        },
        {
            type: 'select',
            input: true,
            key: 'indexeddb.table',
            label: 'Existing Table name',
            refreshOn: 'indexeddb.database',
            clearOnRefresh: true,
            weight: 16,
            tooltip: 'The name of an existing table in the indexeddb database.',
            dataSrc: 'custom',
            valueProperty: 'value',
            skipMerge: true,
            data: {
                custom: function (context) {
                    if (!window.indexedDB) {
                        window.alert("Your browser doesn't support current version of indexedDB");
                        return [];
                    }
                    var database = context.data.indexeddb.database;
                    if (database) {
                        return new Promise(function (resolve) {
                            var db = window.indexedDB.open(database);
                            db.onsuccess = function (sender) {
                                var objectStoreNames = sender.target.result.objectStoreNames;
                                if (objectStoreNames.length) {
                                    var values = Array.from(objectStoreNames).map(function (name) { return ({ value: name, label: name }); });
                                    resolve(values);
                                }
                                else {
                                    resolve([]);
                                }
                            };
                            db.onerror = function () { return resolve([]); };
                        });
                    }
                    return [];
                },
            },
            conditional: {
                json: {
                    '===': [{ var: 'data.indexeddb.fromExisting' }, true],
                },
            },
        },
        {
            type: 'textfield',
            input: true,
            key: 'fetch.url',
            weight: 10,
            label: 'Data Source URL',
            placeholder: 'Data Source URL',
            tooltip: 'A URL that returns data. You can interpolate form data using curly bracket notation.',
            clearOnHide: true,
            validate: {
                required: true,
            },
            conditional: {
                json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
            },
        },
        {
            type: 'select',
            input: true,
            label: 'Method',
            key: 'fetch.method',
            clearOnHide: true,
            tooltip: 'The HTTP Request method to use when making the request.',
            defaultValue: 'get',
            weight: 11,
            template: '<span>{{ item.label }}</span>',
            dataSrc: 'values',
            data: {
                values: [
                    { label: 'Get', value: 'get' },
                    { label: 'Post', value: 'post' }
                ],
            },
            conditional: {
                json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
            },
        },
        {
            type: 'datagrid',
            input: true,
            label: 'Request Headers',
            key: 'fetch.headers',
            /* tslint:disable */
            tooltip: 'Set any headers that should be sent along with the request to the url. This is useful for authentication.',
            /* tslint:enable */
            weight: 12,
            components: [
                {
                    label: 'Key',
                    key: 'key',
                    input: true,
                    type: 'textfield',
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield',
                },
            ],
            clearOnHide: true,
            conditional: {
                json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
            },
        },
        {
            type: 'panel',
            title: 'Transform data',
            theme: 'default',
            collapsible: true,
            collapsed: true,
            key: 'specifyMapFunction',
            weight: 1000,
            tooltip: 'Write custom code to transform DataSource data.',
            components: [
                {
                    type: 'htmlelement',
                    tag: 'div',
                    /* eslint-disable prefer-template */
                    content: '<p>The following variables are available in all scripts.</p>' +
                        '<table class="table table-bordered table-condensed table-striped">' +
                        '<tr><th>form</th><td>The complete form JSON object</td></tr>' +
                        '<tr><th>submission</th><td>The complete submission object.</td></tr>' +
                        '<tr><th>data</th><td>The complete submission data object.</td></tr>' +
                        '<tr><th>responseData</th><td>The data object form response.</td></tr>' +
                        '<tr><th>row</th><td>Contextual "row" data, used within DataGrid, EditGrid, and Container components</td></tr>' +
                        '<tr><th>component</th><td>The current component JSON</td></tr>' +
                        '<tr><th>instance</th><td>The current component instance.</td></tr>' +
                        '<tr><th>value</th><td>The current value of the component.</td></tr>' +
                        '<tr><th>moment</th><td>The moment.js library for date manipulation.</td></tr>' +
                        '<tr><th>_</th><td>An instance of <a href="https://lodash.com/docs/" target="_blank" rel="noopener noreferrer">Lodash</a>.</td></tr>' +
                        '<tr><th>utils</th><td>An instance of the <a href="http://formio.github.io/formio.js/docs/identifiers.html#utils" target="_blank" rel="noopener noreferrer">FormioUtils</a> object.</td></tr>' +
                        '<tr><th>util</th><td>An alias for "utils".</td></tr>' +
                        '</table><br/>'
                    /* eslint-enable prefer-template */
                },
                {
                    type: 'textarea',
                    key: 'fetch.mapFunction',
                    rows: 5,
                    editor: 'ace',
                    hideLabel: true,
                    input: true,
                    placeholder: 'value = responseData.map(i => i.title);'
                },
                {
                    type: 'htmlelement',
                    tag: 'div',
                    content: '<p>Enter custom javascript code.</p><p><h4>Example:</h4><pre>value = responseData.map(i => i.title);</pre></p>'
                }
            ]
        },
        {
            type: 'checkbox',
            input: true,
            key: 'fetch.forwardHeaders',
            label: 'Forward Headers',
            tooltip: 'Check this if you would like to forward the headers passed to the server to the fetch endpoint.',
            clearOnHide: true,
            conditional: {
                json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
            },
        },
        {
            type: 'checkbox',
            input: true,
            weight: 26,
            key: 'fetch.authenticate',
            label: 'Form.io Authentication',
            tooltip: 'Check this if you would like to pass Form.io Authentication headers with the request.',
            clearOnHide: true,
            conditional: {
                json: { '===': [{ var: 'data.dataSrc' }, 'url'] },
            },
        },
        {
            type: 'panel',
            title: 'POST Body Specification',
            theme: 'default',
            collapsible: true,
            collapsed: true,
            key: 'specifyPostBodyPanel',
            weight: 1000,
            tooltip: 'Write custom code to specify POST Body.',
            conditional: {
                json: {
                    and: [
                        {
                            '===': [{ var: 'data.dataSrc' }, 'url'],
                        },
                        {
                            '===': [{ var: 'data.fetch.method' }, 'post'],
                        },
                    ],
                },
            },
            components: [
                {
                    type: 'htmlelement',
                    tag: 'div',
                    /* eslint-disable prefer-template */
                    content: '<p>The following variables are available in all scripts.</p>' +
                        '<table class="table table-bordered table-condensed table-striped">' +
                        '<tr><th>form</th><td>The complete form JSON object</td></tr>' +
                        '<tr><th>submission</th><td>The complete submission object.</td></tr>' +
                        '<tr><th>data</th><td>The complete submission data object.</td></tr>' +
                        '<tr><th>row</th><td>Contextual "row" data, used within DataGrid, EditGrid, and Container components</td></tr>' +
                        '<tr><th>component</th><td>The current component JSON</td></tr>' +
                        '<tr><th>instance</th><td>The current component instance.</td></tr>' +
                        '<tr><th>value</th><td>The current value of the component.</td></tr>' +
                        '<tr><th>moment</th><td>The moment.js library for date manipulation.</td></tr>' +
                        '<tr><th>_</th><td>An instance of <a href="https://lodash.com/docs/" target="_blank" rel="noopener noreferrer">Lodash</a>.</td></tr>' +
                        '<tr><th>utils</th><td>An instance of the <a href="http://formio.github.io/formio.js/docs/identifiers.html#utils" target="_blank" rel="noopener noreferrer">FormioUtils</a> object.</td></tr>' +
                        '<tr><th>util</th><td>An alias for "utils".</td></tr>' +
                        '</table><br/>'
                    /* eslint-enable prefer-template */
                },
                {
                    type: 'textarea',
                    key: 'fetch.specifyPostBody',
                    rows: 5,
                    editor: 'ace',
                    hideLabel: true,
                    input: true,
                    placeholder: 'body = {\n  data: {\n    b: data.a,\n    submit: true,\n  },\n}'
                },
                {
                    type: 'htmlelement',
                    tag: 'div',
                    content: '<p>Enter custom javascript code.</p><p><h4>Example:</h4><pre>body = {\n  data: {\n    b: data.a,\n    submit: true,\n  },\n};</pre></p>'
                }
            ]
        },
        {
            type: 'checkbox',
            input: true,
            weight: 1001,
            key: 'allowCaching',
            label: 'Enable to Store Request Result in the Cache',
            defaultValue: true,
            tooltip: 'When checked, the requests and its results will be stored in the cache and if the Select will try to make the request to the same URL with the same paremetrs, the cached data will be returned. It allows to increase performance, but if the remote source\'s data is changing quite often and you always need to keep it up-to-date, uncheck this option.',
            conditional: {
                json: { '===': [{ var: 'data.dataSrc' }, 'url'] }
            },
        },
    ];
    _.each(extands, function (comp) {
        var compInDefaults = _.find(components, function (defaultComp) { return defaultComp.key === comp.key; });
        if (compInDefaults) {
            _.assign(compInDefaults, comp);
        }
        else {
            components.push(comp);
        }
    });
    return _.filter(components, function (comp) { return !comp.ignore; });
};
export function transformSimpleConditions(component) {
    var conditional = component.conditional, _a = component.logic, logic = _a === void 0 ? [] : _a;
    if (conditional && conditional.when) {
        transformSimpleCondition(conditional);
    }
    _.each(logic, function (logicItem) {
        var _a = logicItem.trigger, trigger = _a === void 0 ? {} : _a;
        if (trigger.type === 'simple' && trigger.simple && trigger.simple.when) {
            transformSimpleCondition(trigger.simple);
        }
    });
}
;
export function transformSimpleCondition(conditional) {
    var _a = conditional.show, show = _a === void 0 ? true : _a, _b = conditional.when, when = _b === void 0 ? '' : _b, _c = conditional.eq, eq = _c === void 0 ? '' : _c;
    var newSimpleCondition = {
        show: show,
        conjunction: 'all',
        conditions: [{
                component: when,
                operator: 'isEqual',
                value: eq
            }]
    };
    _.each(['when', 'eq'], function (prop) { return _.unset(conditional, prop); });
    _.each(newSimpleCondition, function (value, key) { return _.set(conditional, key, value); });
}
;
export function getConditionOperatorOptions(operators) {
    if (operators === void 0) { operators = []; }
    return _.chain(operators)
        .map(function (operatorName) {
        var operator = FormioUtils.ConditionOperators[operatorName];
        return operator
            ? {
                label: operator.displayedName,
                value: operator.operatorKey
            }
            : null;
    })
        .filter(function (option) { return !!option; })
        .value();
}
export function modifyConditionValueComponent(_a) {
    var _b;
    var instance = _a.instance, utils = _a.utils, row = _a.row;
    var conditionComponentPath = row.component;
    var conditionComponent = utils.getComponent(instance.options.editForm.components, conditionComponentPath) || {};
    var componentSimpleConditionSettings = ((_b = Formio.Components.components[conditionComponent.type || 'base']) === null || _b === void 0 ? void 0 : _b.simpleConditionSettings) || {};
    var _c = componentSimpleConditionSettings.valueComponent, getValueComponent = _c === void 0 ? function () { return ({ type: 'textfield' }); } : _c;
    var valueComponent = getValueComponent(conditionComponent);
    _.each(['logic', 'prefix', 'suffix', 'action', 'defaultValue', 'conditional', 'hideLabel', 'multiple', 'calculateValue', 'validate', 'hidden', 'customConditional'], function (prop) { return _.unset(valueComponent, prop); });
    return __assign(__assign({}, valueComponent), getConditionValueComponentRequiredProperties());
}
export function getConditionValueComponentRequiredProperties() {
    return {
        label: 'Value:',
        key: 'value',
        placeholder: 'Enter Compared Value',
        input: true,
        typeChangeEnabled: true,
        logic: [
            {
                name: 'check if row component is defined',
                trigger: {
                    type: 'javascript',
                    javascript: 'result = true || row.component;',
                },
                actions: [
                    {
                        name: 'change value component',
                        type: 'mergeComponentSchema',
                        schemaDefinition: function (ctx) {
                            return modifyConditionValueComponent(ctx);
                        }
                    },
                ],
            },
            {
                name: 'clear value on empty operator',
                trigger: {
                    type: 'javascript',
                    javascript: 'result = !row.operator && row[component.key];',
                },
                actions: [
                    {
                        name: 'clear value',
                        type: 'customAction',
                        customAction: 'instance.resetValue()',
                    },
                ],
            },
        ],
        customConditional: "\n      const singleOperators = _.chain(utils.ConditionOperators)\n        .map(operator => {\n          return !operator.requireValue\n          ? operator.operatorKey\n          : null;\n        })\n        .filter(operatorKey => !!operatorKey)\n        .value();\n      show = !_.includes(singleOperators, row.operator);\n    ",
    };
}
;
export function simpleConditionalComponents(inLogic) {
    return [
        __assign({ label: 'Show or Hide this field', widget: 'choicesjs', tableView: true, dataType: 'boolean', data: {
                values: [
                    {
                        label: 'Show This Field',
                        value: true,
                    },
                    {
                        label: 'Hide This Field',
                        value: false,
                    },
                ],
            }, key: (inLogic ? '' : 'conditional.') + "show", type: 'select', input: true }, (inLogic
            ? {
                type: 'hidden',
                defaultValue: true,
            }
            : {})),
        {
            label: 'When',
            widget: 'choicesjs',
            tableView: true,
            data: {
                values: [
                    {
                        label: 'When all conditions are met',
                        value: 'all',
                    },
                    {
                        label: 'When any condition is met',
                        value: 'any',
                    },
                ],
            },
            key: (inLogic ? '' : 'conditional.') + "conjunction",
            type: 'select',
            input: true,
        },
        {
            label: 'Conditions',
            addAnotherPosition: 'bottom',
            key: (inLogic ? '' : 'conditional.') + "conditions",
            type: 'editgrid',
            initEmpty: true,
            addAnother: 'Add Condition',
            templates: {
                header: "<div class=\"row\">\n      {% util.eachComponent(components, function(component) { %}\n        {% if (displayValue(component)) { %}\n          <div class=\"col-sm-{{_.includes(['component'], component.key) ? '4' : '3'}}\">{{ t(component.label) }}</div>\n        {% } %}\n      {% }) %}\n    </div>",
                row: '<div class="row">\n      {% util.eachComponent(components, function(component) { %}\n        {% if (displayValue(component)) { %}\n          <div class="formio-builder-condition-text col-sm-{{_.includes([\'component\'], component.key) ? \'4\' : \'3\'}}">\n            {{ isVisibleInRow(component) ? getView(component, row[component.key]) : \'\'}}\n          </div>\n        {% } %}\n      {% }) %}\n      {% if (!instance.options.readOnly && !instance.disabled) { %}\n        <div class="col-sm-2">\n          <div class="btn-group pull-right">\n            <button class="btn btn-default btn-light btn-sm editRow"><i class="{{ iconClass(\'edit\') }}"></i></button>\n            {% if (!instance.hasRemoveButtons || instance.hasRemoveButtons()) { %}\n              <button class="btn btn-danger btn-sm removeRow"><i class="{{ iconClass(\'trash\') }}"></i></button>\n            {% } %}\n          </div>\n        </div>\n      {% } %}\n    </div>',
            },
            input: true,
            components: [
                {
                    label: 'When:',
                    widget: 'choicesjs',
                    tableView: true,
                    dataSrc: 'custom',
                    valueProperty: 'value',
                    placeholder: 'Select Form Component',
                    lazyLoad: false,
                    data: {
                        custom: function (context) {
                            return FormioUtils.getContextComponents(context, true, ['form', 'datasource', 'button']);
                        },
                    },
                    key: 'component',
                    type: 'select',
                    input: true,
                },
                {
                    label: 'Is:',
                    widget: 'choicesjs',
                    tableView: true,
                    dataSrc: 'custom',
                    lazyLoad: false,
                    placeholder: 'Select Comparison Operator',
                    refreshOn: (inLogic ? 'logic.trigger.simple.' : 'conditional.') + "conditions.component",
                    clearOnRefresh: true,
                    valueProperty: 'value',
                    data: {
                        custom: function (_a) {
                            var _b, _c;
                            var utils = _a.utils, row = _a.row, instance = _a.instance;
                            var conditionComponent = utils.getComponent(instance.options.editForm.components, row.component);
                            var componentType = conditionComponent ? conditionComponent.type : 'base';
                            return getConditionOperatorOptions(((_c = (_b = Formio.Components.components[componentType]) === null || _b === void 0 ? void 0 : _b.simpleConditionSettings) === null || _c === void 0 ? void 0 : _c.operators) || []);
                        }
                    },
                    key: 'operator',
                    type: 'select',
                    input: true,
                },
                __assign({ type: 'textfield', inputFormat: 'plain' }, getConditionValueComponentRequiredProperties()),
            ],
        },
    ];
}
;
