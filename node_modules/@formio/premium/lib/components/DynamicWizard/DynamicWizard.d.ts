import editForm from './DynamicWizard.form';
declare const DynamicWizard_base: any;
export default class DynamicWizard extends DynamicWizard_base {
    static schema(...extend: any[]): any;
    static get builderInfo(): object;
    static editForm: typeof editForm;
    static get defaultHeaderTemplate(): string;
    static get defaultRowTemplate(): string;
    get dynamicWizardKey(): string;
    get rowRef(): string;
    get rowElements(): any;
    get rowRefs(): any;
    get agreeButtonRef(): string;
    get denyButtonRef(): string;
    get agreeButtonElements(): any;
    get cancelRowRef(): string;
    get cancelRowElements(): any;
    get inlineEditMode(): any;
    get saveEditMode(): boolean;
    get rootWizard(): any;
    get hasComponents(): any;
    get buttons(): {};
    get defaultSchema(): any;
    constructor(...args: any[]);
    init(secondRender: any, prevVisibility?: any): any;
    render(children: any): any;
    attach(element: HTMLElement): any;
    attachNav(): void;
    afterAttachNav(method: any): void;
    attachComponents(element: any, components: any, container: any, isDynamicWizard: any): any;
    visibilityCheck(): void;
    blockingCheck(): void;
    isOpen(editRow: any): boolean;
    resetValue(): void;
    addRow(firstPage?: boolean, reset?: boolean): any;
    cancelRow(): void;
    afterCancelRow(): void;
    rebuild(secondRender?: boolean): any;
    returnPrevPageState(): void;
    setValues(editRow: any): void;
    saveRow(isRowValid: any): boolean;
    saveCurrentPageData(editRow: any): void;
    isRowEditing(editRow: any): boolean;
    switchToStep(component: any): void;
    editRow(rowIndex: any, step?: any): any;
    removeRow(rowIndex: any): void;
    afterRemoveRow(): void;
    renderRow(row: any, rowIndex: any): any;
    hasButton(name: any, nextPage?: boolean): any;
    getNextPage(): boolean;
    prevPage(): void;
    findRootWizard(component: any): any;
    nextPage(): boolean;
    validateStep(component: any, valid: any, dirty: any, rowData: any): any;
    validateRow(editRow: any, dirty: any): any;
    findSourceRoot(root: any): any;
    changeState(changed: any): void;
    addChangingMode(firstPage?: boolean): void;
    afterAddChangingMode(): void;
    removeChangingMode(): void;
    getValueAsString(value: any, options: any): any;
}
export {};
