var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { ResizeObserver } from '@juggle/resize-observer';
import { Formio, Components, Utils } from 'formiojs';
import Two from 'two.js';
import * as _ from 'lodash';
import editForm from './Tagpad.form';
var Component = Components.components.component;
var NestedArrayComponent = Components.components.nestedarray;
var TagpadComponent = /** @class */ (function (_super) {
    __extends(TagpadComponent, _super);
    function TagpadComponent() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.type = 'tagpad';
        _this.dots = [];
        var backgroundReadyPromise = new Formio.Promise(function (resolve, reject) {
            _this.backgroundReady = { resolve: resolve, reject: reject };
        });
        _this.backgroundReady.promise = backgroundReadyPromise;
        _this.dimensionsMultiplier = 1;
        _this.sizeFromSubmission = false;
        return _this;
    }
    TagpadComponent.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return NestedArrayComponent.schema.apply(NestedArrayComponent, __spreadArrays([{
                type: 'tagpad',
                label: 'Tagpad',
                key: 'tagpad',
                input: true,
                dotSize: 10,
                dotStrokeSize: 2,
                dotStrokeColor: '#333',
                dotFillColor: '#ccc',
                dotCustomLabel: '',
                components: [],
                tree: true,
                template: TagpadComponent.defaultDotPreviewTemplate,
            }], extend));
    };
    Object.defineProperty(TagpadComponent, "builderInfo", {
        get: function () {
            return {
                title: 'Tagpad',
                group: 'premium',
                icon: 'tag',
                weight: 115,
                documentation: '/userguide/forms/premium-components#tagpad',
                schema: TagpadComponent.schema(),
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "defaultSchema", {
        get: function () {
            return TagpadComponent.schema();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "emptyValue", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "defaultValue", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "iterableRows", {
        get: function () {
            return this.editForms;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "buttons", {
        get: function () {
            var _this = this;
            var buttons = {};
            [{ name: 'removeDot', method: 'removeSelectedDot' }].forEach(function (button) {
                if (_this.hasButton(button.name)) {
                    buttons[button.name] = button;
                }
            });
            return buttons;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "dataReady", {
        get: function () {
            return this.backgroundReady.promise;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "renderContext", {
        get: function () {
            return {
                selectedDot: this.selectedDot,
                hasDots: this.dots && this.dots.length || this.dataValue.length,
                buttons: this.buttons,
                canvasMaxHeight: this.userDefiniedCanvasSize.height ? this.userDefiniedCanvasSize.height + 'px' : '50%',
                canvasMaxWidth: this.userDefiniedCanvasSize.width ? this.userDefiniedCanvasSize.width + 'px' : '50%',
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent.prototype, "userDefiniedCanvasSize", {
        get: function () {
            var width = parseInt(this.component.canvasWidth, 10);
            var height = parseInt(this.component.canvasHeight, 10);
            return !isNaN(width) && !isNaN(height) ? { width: width, height: height } : { width: undefined, height: undefined };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TagpadComponent, "defaultDotPreviewTemplate", {
        get: function () {
            return "<div class=\"dot-preview-label\"> Dot {{index + 1}}: </div>\n    {% Object.keys(dot).forEach(function(key) { %}\n      <div style=\"margin-left: 15px;\"><span class=\"dot-preview-field-label\">{{key}}</span>:\n        <p class=\"dot-preview-value\">\n          {{\n            instance.getComponent([index, key]) && 'getValueAsString' in instance.getComponent([index, key])\n              ? instance.getComponent([index, key]).getValueAsString(dot[key])\n              : dot[key]\n          }}\n        </p>\n    </div>\n    {% }) %}";
        },
        enumerable: false,
        configurable: true
    });
    TagpadComponent.prototype.init = function () {
        var _this = this;
        if (this.builderMode) {
            this.editForms = [];
            return _super.prototype.init.call(this);
        }
        this.components = this.components || [];
        var dataValue = this.dataValue || this.emptyValue;
        this.editForms = dataValue.map(function (dotValue, index) { return ({
            isOpen: false,
            data: dotValue.dot ? dotValue.dot.data : dotValue.data,
            components: _this.createFormComponents(dotValue, index),
        }); });
    };
    TagpadComponent.prototype.render = function (children) {
        if (this.builderMode) {
            return _super.prototype.render.call(this);
        }
        var ctx = this.renderContext;
        return _super.prototype.render.call(this, children || this.renderTemplate('tagpad', __assign(__assign({}, ctx), { components: this.renderComponents(this.formComponents) })));
    };
    TagpadComponent.prototype.attach = function (element) {
        var _this = this;
        var backgroundReadyPromise = new Formio.Promise(function (resolve, reject) {
            _this.backgroundReady = { resolve: resolve, reject: reject };
        });
        this.backgroundReady.promise = backgroundReadyPromise;
        if (this.builderMode) {
            return _super.prototype.attach.call(this, element);
        }
        this.loadRefs(element, {
            canvas: 'single',
            background: 'single',
            form: 'single',
            canvasImage: 'single',
            image: 'single',
            removeDot: 'single',
        });
        if (this.formComponents) {
            this.attachComponents(this.refs.form, this.formComponents);
        }
        if (this.refs.background && this.hasBackgroundImage) {
            this.createDrawingArea();
            this.backgroundReady.promise.then(function () {
                _this.resizeObserver = new ResizeObserver(function () {
                    if (_this.originalImageSize && (!_this.originalImageSize.width || !_this.originalImageSize.height)) {
                        _this.setOriginalImageSize();
                        var _a = _this.originalImageSize, width = _a.width, height = _a.height;
                        _this.setDimensions(0, 0, width, height);
                        _this.setViewBoxAttribute(_this.canvasSvg, _this.dimensions);
                    }
                    _this.stretchDrawingArea();
                });
                if (_this.refs.background) {
                    _this.resizeObserver.observe(_this.refs.background);
                }
            });
            if (!this.disabled && !this.shouldDisabled && !this.readOnly) {
                this.attachDrawEvents();
            }
            if (this.refs.image && !this.imageWasLoaded) {
                this.refs.image.addEventListener('load', function (e) {
                    _this.setOriginalImageSize();
                    _this.imageWasLoaded = true;
                    _this.addBackground();
                });
            }
            else {
                this.addBackground();
            }
        }
        this.attachButtons();
        if (this.dataValue.length > 0 && this.dots.length === 0) {
            this.createDots();
        }
        else if (this.dots.length > 0) {
            this.dots.forEach(function (dot) { return _this.drawDot(dot.dot, dot.index); });
        }
        return _super.prototype.attach.call(this, element);
    };
    TagpadComponent.prototype.beforeFocus = function (childComponent) {
        if ('beforeFocus' in this.parent) {
            this.parent.beforeFocus(this);
        }
        var relativePath = this.getRelativePath(childComponent.path);
        var arrayPath = Utils.getArrayFromComponentPath(relativePath);
        if (Utils._.isNumber(arrayPath[0])) {
            this.selectDot(arrayPath[0]);
        }
    };
    TagpadComponent.prototype.getRelativePath = function (path) {
        var keyPart = "." + this.key;
        var thisPath = this.isInputComponent ? this.path
            : this.path.slice(0).replace(keyPart, '');
        return path.replace(thisPath, '');
    };
    TagpadComponent.prototype.setOriginalImageSize = function () {
        this.loadRefs(this.element, { background: 'single', canvasContainer: 'single' });
        var computedStyle = window.getComputedStyle(this.refs.background);
        var width = parseInt(computedStyle === null || computedStyle === void 0 ? void 0 : computedStyle.width, 10);
        var height = parseInt(computedStyle === null || computedStyle === void 0 ? void 0 : computedStyle.height, 10);
        width = isNaN(width) ? 0 : width;
        height = isNaN(height) ? 0 : height;
        this.originalImageSize = { width: width, height: height };
    };
    TagpadComponent.prototype.attachDrawEvents = function () {
        var _this = this;
        if (this.options.readOnly || !this.canvasSvg) {
            return;
        }
        // Set up mouse event.
        this.canvasSvg.addEventListener('mouseup', function (e) { return _this.mouseEnd(e); });
        // Set up touch event.
        this.canvasSvg.addEventListener('touchend', function (e) { return _this.touchEnd(e); });
        this.two.update();
    };
    TagpadComponent.prototype.attachButtons = function () {
        var _this = this;
        Utils._.each(this.buttons, function (button) {
            var buttonElement = _this.refs["" + button.name];
            if (buttonElement) {
                _this.addEventListener(buttonElement, 'click', function (event) {
                    event.preventDefault();
                    buttonElement.setAttribute('disabled', 'disabled');
                    _this.setLoading(buttonElement, true);
                    if (typeof _this[button.method] === 'function') {
                        _this[button.method]();
                    }
                    buttonElement.removeAttribute('disabled');
                    _this.setLoading(buttonElement, false);
                });
            }
        });
    };
    TagpadComponent.prototype.redraw = function () {
        _super.prototype.redraw.call(this);
        var shapes = [];
        this.dots.forEach(function (dot) { return shapes.push(dot.shape.circle, dot.shape.text); });
        if (this.two) {
            this.two.add(shapes);
        }
    };
    TagpadComponent.prototype.destroy = function () {
        if (this.canvasSvg) {
            this.canvasSvg.removeEventListener('touchend', this.touchEnd);
            this.canvasSvg.removeEventListener('mouseup', this.mouseEnd);
        }
        _super.prototype.destroy.call(this);
        this.emit('destroy');
        this.off('destroy');
    };
    TagpadComponent.prototype.destroyDot = function (index) {
        var _this = this;
        if (!this.dots[index]) {
            return;
        }
        var dot = this.dots[index];
        _.each(this.drawDotEvents, function (event) {
            dot.shape.circle._renderer.elem.removeEventListener(event, _this.dotClicked);
            dot.shape.text._renderer.elem.removeEventListener(event, _this.dotClicked);
        });
    };
    TagpadComponent.prototype.destroyComponents = function () {
        if (this.builderMode || !this.formComponents) {
            return _super.prototype.destroyComponents.call(this);
        }
        var components = this.formComponents.slice();
        components.forEach(function (comp) { return comp.destroy(); });
    };
    TagpadComponent.prototype.addBackground = function () {
        if (this.refs.image && this.refs.image.complete && !this.imageWasLoaded) {
            this.imageWasLoaded = true;
            return;
        }
        else if (this.refs.image && this.refs.image.complete && this.imageWasLoaded) {
            this.setBackgroundImage();
        }
    };
    TagpadComponent.prototype.setBackgroundImage = function (image) {
        if (!this.sizeFromSubmission) {
            var _a = this.originalImageSize, width = _a.width, height = _a.height;
            this.setDimensions(0, 0, width, height);
            this.setViewBoxAttribute(this.canvasSvg, this.dimensions);
        }
        else {
            this.setViewBoxAttribute(this.canvasSvg, this.dimensions);
        }
        this.loadRefs(this.refs.background, {
            backgroundImage: 'single',
        });
        this.stretchDrawingArea();
        this.backgroundReady.resolve();
    };
    TagpadComponent.prototype.mapDimensionsFromAttributes = function (svg) {
        return [
            { attribute: 'x', defaultValue: 0 },
            { attribute: 'y', defaultValue: 0 },
            { attribute: 'width', defaultValue: 640 },
            { attribute: 'height', defaultValue: 480 },
        ].map(function (dimension) {
            return parseFloat(svg.getAttribute(dimension.attribute)) || dimension.defaultValue;
        });
    };
    TagpadComponent.prototype.setDimensions = function (viewBoxMinX, viewBoxMinY, viewBoxWidth, viewBoxHeight) {
        this.dimensions = {
            width: viewBoxWidth,
            height: viewBoxHeight,
            minX: viewBoxMinX,
            minY: viewBoxMinY,
        };
    };
    TagpadComponent.prototype.setViewBoxAttribute = function (element, viewBox) {
        element.setAttribute('viewBox', viewBox.minX + " " + viewBox.minY + " " + viewBox.width + " " + viewBox.height);
    };
    TagpadComponent.prototype.hasButton = function (buttonName) {
        switch (buttonName) {
            case 'removeDot':
                return !this.options.readOnly;
            default:
                return false;
        }
    };
    Object.defineProperty(TagpadComponent.prototype, "iteratableRows", {
        get: function () {
            return this.editForms;
        },
        enumerable: false,
        configurable: true
    });
    TagpadComponent.prototype.componentContext = function (component) {
        return this.iteratableRows[component.row] ? this.iteratableRows[component.row].data : {};
    };
    TagpadComponent.prototype.createFormComponents = function (dotValue, index) {
        var _this = this;
        var formComponents = [];
        this.component.components.forEach(function (component) {
            var options = Utils._.clone(_this.options);
            options.row = "" + index;
            options.name += "[" + index + "]";
            var dotData = dotValue.dot ? dotValue.dot.data : dotValue.data;
            var componentInstance = _this.createComponent(component, options, dotData);
            formComponents.push(componentInstance);
        });
        return formComponents;
    };
    TagpadComponent.prototype.redrawDots = function () {
        this.dots = [];
        this.two.clear();
        this.two.render();
        this.createDots();
    };
    TagpadComponent.prototype.createDots = function () {
        var _this = this;
        var dotsValues = this.dataValue;
        if (!dotsValues || !dotsValues.length || !this.two) {
            return;
        }
        dotsValues.forEach(function (dot, index) {
            if (!_this.dots[index]) {
                _this.addDot(dot);
            }
        });
        this.dots.splice(dotsValues.length);
        this.editForms.splice(dotsValues.length);
    };
    TagpadComponent.prototype.getComponent = function (path, fn) {
        path = Array.isArray(path) ? path : [path];
        var comp = null;
        var editFormIndex = path[0], key = path[1], remainingPath = path.slice(2);
        if (!Utils._.isNumber(editFormIndex) || !key) {
            return comp;
        }
        this.everyComponent(function (component) {
            if (component.key === key) {
                comp = component;
            }
        }, editFormIndex);
        if (comp) {
            if (Utils._.isFunction(fn)) {
                fn(comp, this.getComponents);
            }
            if (remainingPath.length && 'getComponent' in comp) {
                return comp.getComponent(remainingPath, fn);
            }
        }
        return comp;
    };
    TagpadComponent.prototype.rescaleImage = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (!options.fromSubmission || !this.dataValue.length) {
            return;
        }
        if (Utils._.get(this.dataValue, '[0].coordinate.width', false)) {
            this.setDimensions(0, 0, this.dataValue[0].coordinate.width, this.dataValue[0].coordinate.height);
            this.sizeFromSubmission = true;
            return;
        }
        // Resaving the submission will apply changes.
        if (this.hasBackgroundImage) {
            this.backgroundReady.promise.then(function () {
                _this.dataValue = _this.dataValue.map(function (dot) {
                    dot.coordinate.width = _this.dimensions.width;
                    dot.coordinate.height = _this.dimensions.height;
                    return dot;
                });
            });
        }
    };
    TagpadComponent.prototype.setValue = function (value, options) {
        this.dataValue = value;
        this.rescaleImage(options);
        this.createDots();
        this.rebuild();
    };
    TagpadComponent.prototype.mouseEnd = function (e) {
        e.preventDefault();
        var offset = this.canvasSvg.getBoundingClientRect();
        var coordinate = this.getActualCoordinate({
            x: e.clientX - offset.left,
            y: e.clientY - offset.top,
        });
        this.addDot({ coordinate: coordinate, data: {} });
        this.selectDot(this.dots.length - 1);
    };
    TagpadComponent.prototype.touchEnd = function (e) {
        e.preventDefault();
        var offset = this.canvasSvg.getBoundingClientRect();
        var touch = e.changedTouches[0];
        var coordinate = this.getActualCoordinate({
            x: touch.clientX - offset.left,
            y: touch.clientY - offset.top,
        });
        this.addDot({ coordinate: coordinate, data: {} });
        this.selectDot(this.dots.length - 1);
    };
    TagpadComponent.prototype.getActualCoordinate = function (coordinate) {
        // recalculate coordinate taking into account changed size of drawing area
        coordinate.x = Math.round(coordinate.x / this.dimensionsMultiplier) + this.dimensions.minX;
        coordinate.y = Math.round(coordinate.y / this.dimensionsMultiplier) + this.dimensions.minY;
        coordinate.width = this.dimensions.width;
        coordinate.height = this.dimensions.height;
        return coordinate;
    };
    TagpadComponent.prototype.selectDot = function (index) {
        if (this.selectedDot && this.dots[this.selectedDot.index]) {
            this.dots[this.selectedDot.index].shape.circle.dashes = [0];
        }
        if (!Utils._.isNumber(index) || !this.dots[index]) {
            this.selectedDot = null;
            this.redraw();
            return;
        }
        var dot = this.dots[index];
        this.selectedDot = dot;
        this.dots[this.selectedDot.index].shape.circle.dashes = [1];
        this.formComponents = this.editForms[index].components;
        this.redraw();
        this.triggerChange();
    };
    TagpadComponent.prototype.dotClicked = function (e, index) {
        // prevent drawing another dot near clicked dot
        e.stopPropagation();
        this.selectDot(index);
    };
    TagpadComponent.prototype.addDot = function (dot) {
        var newDotIndex = this.dots.length;
        var shape = this.drawDot(dot, newDotIndex);
        this.dots.push({
            index: newDotIndex,
            dot: dot,
            shape: shape,
        });
        if (!this.dataValue[newDotIndex]) {
            this.dataValue.push(dot);
        }
        this.editForms.push({
            components: this.createFormComponents(this.dots[newDotIndex], newDotIndex),
            data: dot,
        });
    };
    Object.defineProperty(TagpadComponent.prototype, "drawDotEvents", {
        get: function () {
            return ['mouseup', 'touchend'];
        },
        enumerable: false,
        configurable: true
    });
    TagpadComponent.prototype.drawDot = function (dot, index) {
        var _this = this;
        var _a = dot.coordinate, x = _a.x, y = _a.y;
        var circle = this.drawDotCircle(x, y, this.component.dotSize, index);
        var text = this.drawDotLabel(x, y, this.component.dotCustomLabel || index + 1);
        this.two.add(circle, text);
        this.two.update();
        _.each(this.drawDotEvents, function (event) {
            circle._renderer.elem.addEventListener(event, function (e) { return _this.dotClicked(e, index); });
            text._renderer.elem.addEventListener(event, function (e) { return _this.dotClicked(e, index); });
        });
        return { circle: circle, text: text };
    };
    TagpadComponent.prototype.drawDotCircle = function (x, y, size, index) {
        var circle = this.two.makeCircle(x, y, size);
        circle.fill = this.component.dotFillColor;
        circle.stroke = this.component.dotStrokeColor;
        circle.linewidth = this.component.dotStrokeSize;
        circle.className += ' formio-tagpad-dot';
        if (this.selectedDot && this.selectedDot.index === index) {
            circle.dashes = [1];
        }
        return circle;
    };
    TagpadComponent.prototype.drawDotLabel = function (x, y, label) {
        var text = new Two.Text(label, x, y);
        text.className += ' formio-tagpad-dot-index';
        text.styles = { color: this.component.dotStrokeColor };
        return text;
    };
    TagpadComponent.prototype.createDrawingArea = function () {
        this.two = new Two({
            type: Two.Types.svg,
            width: '100%',
            height: '100%',
        }).appendTo(this.refs.canvas);
        this.canvasSvg = this.two.renderer.domElement;
        this.canvasSvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
    };
    TagpadComponent.prototype.stretchDrawingArea = function () {
        var _a, _b;
        this.loadRefs(this.element, { background: 'single' });
        var width = (_a = this.refs.background) === null || _a === void 0 ? void 0 : _a.offsetWidth;
        var height = (_b = this.refs.background) === null || _b === void 0 ? void 0 : _b.offsetHeight;
        // don't stretch if background dimensions are unknown yet
        if (width && height) {
            // will need dimensions multiplier for coordinates calculation
            var dimensionsMultiplier = width / this.dimensions.width;
            // Update the editor's size only if the dimensionsMultiplier is changed
            if (this.dimensionsMultiplier !== dimensionsMultiplier) {
                this.dimensionsMultiplier = width / this.dimensions.width;
                this.setEditorSize(width, height);
            }
        }
    };
    TagpadComponent.prototype.setEditorSize = function (width, height) {
        this.two.width = width;
        this.two.height = height;
        this.two.update();
        if (this.refs.image) {
            this.refs.image.setAttribute('width', width);
            this.refs.image.setAttribute('height', height);
        }
    };
    Object.defineProperty(TagpadComponent.prototype, "hasBackgroundImage", {
        get: function () {
            return this.component.image || this.component.imageUrl;
        },
        enumerable: false,
        configurable: true
    });
    TagpadComponent.prototype.removeSelectedDot = function () {
        if (!this.selectedDot || !this.dataValue[this.selectedDot.index]) {
            return;
        }
        this.destroyDot(this.selectedDot.index);
        this.destroyComponents();
        this.dataValue.splice(this.selectedDot.index, 1);
        this.dots = [];
        this.editForms = [];
        this.components = [];
        this.createDots();
        this.selectDot(0);
    };
    TagpadComponent.prototype.focus = function () {
        return this.refs.canvas && this.refs.canvas.focus();
    };
    TagpadComponent.prototype.checkData = function (data, flags, row) {
        var _this = this;
        data = data || this.rootValue;
        flags = flags || {};
        row = row || this.data;
        Component.prototype.checkData.call(this, data, flags, row);
        return this.editForms.reduce(function (valid, editForm, index) { return _this.checkDot(data, flags, editForm.data, index) && valid; }, true);
    };
    TagpadComponent.prototype.checkValidity = function (data, dirty, row) {
        data = data || this.rootValue;
        row = row || this.data;
        if (!this.checkCondition(row, data)) {
            this.setCustomValidity('');
            return true;
        }
        return this.checkComponentValidity(data, dirty, row);
    };
    TagpadComponent.prototype.checkComponentValidity = function (data, dirty, row) {
        var _this = this;
        if (!_super.prototype.checkComponentValidity.call(this, data, dirty, row)) {
            return false;
        }
        var dotsValid = true;
        this.editForms.forEach(function (editForm, index) {
            var dotFormValid = _this.checkDotValidity(editForm, dirty, _this.dots[index]);
            dotsValid = dotsValid && dotFormValid;
        });
        if (!dotsValid) {
            return false;
        }
        var message = this.invalid || this.invalidMessage(data, dirty);
        this.setCustomValidity(message, dirty);
        return true;
    };
    TagpadComponent.prototype.checkDot = function (data, flags, row, dotIndex) {
        var isValid = _super.prototype.checkData.call(this, data, flags, row, this.editForms[dotIndex].components);
        this.setDotValidity(this.dots[dotIndex], isValid);
        return isValid;
    };
    TagpadComponent.prototype.checkDotValidity = function (editForm, dirty, dot) {
        var isValid = true;
        if (!editForm) {
            return true;
        }
        var isDirty = dirty || editForm.dirty;
        editForm.components.forEach(function (comp) {
            isDirty = isDirty || !comp.pristine;
            if (isDirty) {
                comp.setPristine(!isDirty);
                editForm.dirty = !!isDirty;
                isValid = isValid && comp.checkValidity(null, isDirty, editForm.data);
            }
        });
        this.setDotValidity(dot, isValid);
        return !!isValid;
    };
    TagpadComponent.prototype.addDotNumberToErrorMessages = function (dot) {
        this.editForms[dot.index].components.forEach(function (comp) {
            comp.errors.forEach(function (err) {
                var dotInfo = " (see dot " + (dot.index + 1) + ")";
                if (!err.message.includes(dotInfo)) {
                    err.message += dotInfo;
                    err.messages.forEach(function (m) { return m.message += dotInfo; });
                }
            });
        });
    };
    TagpadComponent.prototype.setDotValidity = function (dot, isValid) {
        if (dot) {
            var color = isValid ? this.component.dotStrokeColor : '#ff0000';
            // change style of dot based on its validity
            dot.shape.circle.stroke = color;
            dot.shape.text.styles.color = color;
            this.two.update();
            this.addDotNumberToErrorMessages(dot);
        }
    };
    TagpadComponent.prototype.getDataAsString = function () {
        var _this = this;
        var stringData = '';
        {
            var template_1 = this.component.template || TagpadComponent.defaultDotPreviewTemplate;
            this.iterableRows.forEach(function (_a, index) {
                var data = _a.data, components = _a.components;
                var dotValue = _this.interpolate(template_1, { dot: data, index: index, components: components, instance: _this });
                stringData += dotValue;
            });
            return stringData;
        }
    };
    TagpadComponent.prototype.getValueAsString = function (value, options) {
        var _this = this;
        if (!value || !value.length) {
            return '';
        }
        if (options && options.email) {
            var componentsHeaders_1 = '';
            Utils.eachComponent(this.components, function (component) {
                componentsHeaders_1 += "<th>" + component.label + "</th>";
            });
            var result_1 = ("\n        <table border=\"1\" style=\"width:100%\">\n          <thead>\n            <tr><th>Dots</th>" + componentsHeaders_1 + "</tr>\n          </thead>\n          <tbody>\n      ");
            value.map(function (dot, index) {
                var components = _this.editForms[index].components;
                var componentsValues = '';
                Utils.eachComponent(components, function (component) {
                    componentsValues += '<td style="text-align: center">';
                    if (component.isInputComponent && component.visible && !component.skipInEmail) {
                        componentsValues += component.getView(component.dataValue, options);
                    }
                    componentsValues += '</td>';
                });
                result_1 += ("\n          <tr>\n            <td style=\"text-align: center\">" + (index + 1) + "</td>\n            " + componentsValues + "\n          </tr>\n        ");
            });
            result_1 += '</tbody></table>';
            return result_1;
        }
        return _super.prototype.getValueAsString.call(this, value, options);
    };
    TagpadComponent.editForm = editForm;
    return TagpadComponent;
}(NestedArrayComponent));
export default TagpadComponent;
