import { ResizeObserver } from '@juggle/resize-observer';
import editForm from './Tagpad.form';
declare const NestedArrayComponent: any;
interface IDot {
    dot: {
        coordinate: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        data: any;
    };
    index: number;
    shape: {
        circle: any;
        text: any;
    };
}
export default class TagpadComponent extends NestedArrayComponent {
    static editForm: typeof editForm;
    static schema(...extend: any[]): any;
    static get builderInfo(): {
        title: string;
        group: string;
        icon: string;
        weight: number;
        documentation: string;
        schema: any;
    };
    selectedDot: IDot;
    dots: IDot[];
    canvasSvg: SVGSVGElement;
    formComponents: any;
    dimensions: {
        width: number;
        height: number;
        minX: number;
        minY: number;
    };
    dimensionsMultiplier: number;
    two: any;
    backgroundReady: any;
    resizeObserver: ResizeObserver;
    sizeFromSubmission: boolean;
    get defaultSchema(): any;
    get emptyValue(): any[];
    get defaultValue(): any[];
    get iterableRows(): any;
    get buttons(): {};
    get dataReady(): any;
    get renderContext(): {
        selectedDot: IDot;
        hasDots: any;
        buttons: {};
        canvasMaxHeight: string;
        canvasMaxWidth: string;
    };
    get userDefiniedCanvasSize(): {
        width: number;
        height: number;
    };
    static get defaultDotPreviewTemplate(): string;
    constructor(...args: any[]);
    init(): any;
    render(children: any): any;
    attach(element: any): any;
    beforeFocus(childComponent: any): void;
    getRelativePath(path: any): any;
    setOriginalImageSize(): void;
    attachDrawEvents(): void;
    attachButtons(): void;
    redraw(): void;
    destroy(): void;
    destroyDot(index: any): void;
    destroyComponents(): any;
    addBackground(): void;
    setBackgroundImage(image?: any): void;
    mapDimensionsFromAttributes(svg: any): number[];
    setDimensions(viewBoxMinX: any, viewBoxMinY: any, viewBoxWidth: any, viewBoxHeight: any): void;
    setViewBoxAttribute(element: any, viewBox: any): void;
    hasButton(buttonName: any): boolean;
    get iteratableRows(): any;
    componentContext(component: any): any;
    createFormComponents(dotValue: any, index: any): any[];
    redrawDots(): void;
    createDots(): void;
    getComponent(path: any, fn: any): any;
    rescaleImage(options?: any): void;
    setValue(value: any, options: any): void;
    mouseEnd(e: any): void;
    touchEnd(e: any): void;
    getActualCoordinate(coordinate: any): any;
    selectDot(index: any): void;
    dotClicked(e: any, index: any): void;
    addDot(dot: any): void;
    get drawDotEvents(): string[];
    drawDot(dot: any, index: any): {
        circle: any;
        text: any;
    };
    drawDotCircle(x: any, y: any, size: any, index: any): any;
    drawDotLabel(x: any, y: any, label: any): any;
    createDrawingArea(): void;
    stretchDrawingArea(): void;
    setEditorSize(width: any, height: any): void;
    get hasBackgroundImage(): any;
    removeSelectedDot(): void;
    focus(): any;
    checkData(data?: any, flags?: any, row?: any): any;
    checkValidity(data: any, dirty: any, row?: any): boolean;
    checkComponentValidity(data: any, dirty: any, row: any): boolean;
    checkDot(data: any, flags: any, row: any, dotIndex: any): any;
    checkDotValidity(editForm: any, dirty: any, dot: any): boolean;
    addDotNumberToErrorMessages(dot: any): void;
    setDotValidity(dot: any, isValid: any): void;
    getDataAsString(): string;
    getValueAsString(value: any, options: any): any;
}
export {};
