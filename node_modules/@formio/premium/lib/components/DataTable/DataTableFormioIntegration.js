var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Components, Builders } from 'formiojs';
function findParent(component, fn) {
    if (fn === void 0) { fn = function (parent) { return false; }; }
    if (!component || !component.parent) {
        return null;
    }
    else if (fn === null || fn === void 0 ? void 0 : fn(component.parent)) {
        return component.parent;
    }
    else {
        return findParent(component.parent, fn);
    }
}
// Extend editComponent function of webform builder
var originalEditComponent = Builders.builders.webform.prototype.editComponent;
Builders.builders.webform.prototype.editComponent =
    function (component, parent, isNew, isJsonEdit, original, flags) {
        if (flags === void 0) { flags = {}; }
        var parentComponent = parent === null || parent === void 0 ? void 0 : parent.formioComponent;
        var isInDataTable = parentComponent && (parentComponent.type === 'datatable' ||
            !!findParent(parentComponent, function (comp) { return comp.type === 'datatable'; }));
        originalEditComponent.call(this, component, parent, isNew, isJsonEdit, original, __assign({ isInDataTable: isInDataTable }, flags));
    };
function showHideColumnByDefault(context) {
    var _a, _b;
    return ((_b = (_a = context.instance.options) === null || _a === void 0 ? void 0 : _a.flags) === null || _b === void 0 ? void 0 : _b.isInDataTable) &&
        !['hidden', 'columns', 'panel', 'table', 'tabs', 'well', 'fieldset']
            .includes(context.data.type);
}
// Extend editForm function of all components
Object.values(Components.components)
    .forEach(function (comp) {
    var originalEditForm = comp.editForm;
    comp.editForm = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return originalEditForm.apply(void 0, __spreadArrays([dataTableConfigFields()], extend));
    };
});
export function dataTableConfigFields() {
    return [
        {
            key: 'display',
            components: [
                {
                    weight: 442,
                    type: 'number',
                    input: true,
                    key: 'columnWeight',
                    label: 'Column weight in DataTable',
                    placeholder: '0',
                    defaultValue: 0,
                    tooltip: 'Make columns appear in a different order in the table.',
                    customConditional: function (context) {
                        return showHideColumnByDefault(context);
                    }
                },
                {
                    weight: 1370,
                    type: 'checkbox',
                    label: 'Hide column in Data Table by default',
                    tooltip: 'Hide column in Data Table by default.',
                    key: 'hideColumnByDefault',
                    input: true,
                    customConditional: function (context) {
                        return showHideColumnByDefault(context);
                    }
                },
                {
                    label: 'Disable sorting and filtering in Data Table',
                    tooltip: 'if enabled, sorting and filtering is disabled for this column.',
                    tableView: false,
                    key: 'disableSortingAndFiltering',
                    type: 'checkbox',
                    input: true,
                    weight: 1390,
                    defaultValue: false,
                    customConditional: function (context) {
                        return showHideColumnByDefault(context);
                    }
                },
                {
                    label: 'Column Query Property',
                    weight: 445,
                    tooltip: 'The component property to use it in API driven Data Table queries for filtering and sorting. If the property is not defined, the component key will be used instead.',
                    tableView: true,
                    key: 'columnQueryProperty',
                    type: 'textfield',
                    input: true,
                    customConditional: function (context) {
                        return showHideColumnByDefault(context);
                    },
                },
            ]
        }
    ];
}
