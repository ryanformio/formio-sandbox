var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Components, Utils, Providers } from 'formiojs';
import * as _ from 'lodash';
import { filterByComponentType } from './customFilters';
var EditGridComponent = Components.components.editgrid;
import editForm from './DataTable.form';
import './DataTableFormioIntegration';
if (!Formio.cdn.baseUrl) {
    Formio.cdn.setBaseUrl('https://cdn.form.io');
}
;
if ((Formio.version || '').includes('rc')) {
    Formio.cdn.setOverrideUrl('grid', 'https://cdn.test-form.io');
    Formio.cdn.setOverrideUrl('core', 'https://cdn.test-form.io');
}
;
var DataTableComponent = /** @class */ (function (_super) {
    __extends(DataTableComponent, _super);
    function DataTableComponent() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.editRows = [];
        _this.savedRows = [];
        _this.isModalOpened = false;
        _this.columns = {};
        _this.initComponents = [];
        _this.type = 'datatable';
        _this.tabIndex = 0;
        var dataTableReadyPromise = new Formio.Promise(function (resolve, reject) {
            _this.dataTableReady = { resolve: resolve, reject: reject };
        });
        _this.dataTableReady.promise = dataTableReadyPromise;
        return _this;
    }
    DataTableComponent.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return EditGridComponent.schema.apply(EditGridComponent, __spreadArrays([{
                type: 'datatable',
                label: 'Data Table',
                key: 'dataTable',
            }], extend));
    };
    Object.defineProperty(DataTableComponent, "builderInfo", {
        get: function () {
            return {
                title: 'Data Table',
                group: 'premium',
                icon: 'table',
                weight: 115,
                documentation: '/userguide/forms/premium-components#data-table',
                schema: DataTableComponent.schema(),
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "dataReady", {
        get: function () {
            return this.dataTableReady.promise;
        },
        enumerable: false,
        configurable: true
    });
    DataTableComponent.prototype.render = function (children) {
        var _this = this;
        var _a;
        if (this.builderMode) {
            return _super.prototype.render.call(this);
        }
        return _super.prototype.render.call(this, children || this.renderTemplate('datatable', {
            ref: {
                row: this.rowRef,
                addRow: this.addRowRef,
                saveRow: this.saveRowRef,
                cancelRow: this.cancelRowRef,
            },
            header: "<h4>" + (((_a = this.editRows[0]) === null || _a === void 0 ? void 0 : _a.state) === 'new' ? 'Add row' : 'Edit row') + "</h4>",
            rows: this.editRows.map(this.renderRow.bind(this)),
            openRows: this.editRows.map(function (row) { return _this.isOpen(row); }),
            errors: this.editRows.map(function (row) { return row.error; }),
            hasRemoveButtons: this.hasRemoveButtons(),
        }));
    };
    DataTableComponent.prototype.attach = function (element) {
        var _this = this;
        var dataTableReadyPromise = new Formio.Promise(function (resolve, reject) {
            _this.dataTableReady = { resolve: resolve, reject: reject };
        });
        this.dataTableReady.promise = dataTableReadyPromise;
        if (this.builderMode) {
            return _super.prototype.attach.call(this, element);
        }
        return _super.prototype.attach.call(this, element)
            .then(function () {
            var _a;
            _this.attachModal(_this.element);
            _this.loadRefs(_this.element, {
                tableContainer: 'single',
            });
            if (_this.formioGrid && _this.refs.tableContainer) {
                _this.formioGrid.setData(_this.dataValue);
                _this.formioGrid.init();
                _this.formioGrid.attach(_this.refs.tableContainer);
                if ((_a = _this.component.fetch) === null || _a === void 0 ? void 0 : _a.enableFetch) {
                    _this.dataTableReady.resolve();
                }
                return;
            }
            _this.loadFormioGrid()
                .then(function (FormioGrid) {
                _this.FormioCore.Template.framework = Formio.Templates.framework;
                return _this.initFormioGrid(FormioGrid)
                    .then(function () {
                    _this.dataTableReady.resolve();
                });
            });
        });
    };
    DataTableComponent.prototype.loadFormioGrid = function () {
        var _this = this;
        Formio.requireLibrary('formioGridCSS', 'FormioGrid', [
            { type: 'styles', src: Formio.cdn.grid + "/formio.grid.min.css" }
        ], false);
        return Formio.requireLibrary('FormioCore', 'FormioCore', Formio.cdn.core + "/formio.core.min.js", true)
            .then(function (FormioCore) {
            _this.FormioCore = FormioCore;
            return Formio.requireLibrary('FormioGrid', 'FormioGrid', Formio.cdn.grid + "/formio.grid.min.js", true);
        });
    };
    DataTableComponent.prototype.attachComponent = function (_a) {
        var _b;
        var _this = this;
        var key = _a.key, element = _a.element, value = _a.value, onChange = _a.onChange, row = _a.row, rowIndex = _a.rowIndex, index = _a.index, readOnly = _a.readOnly;
        var component = this.columns[key];
        if (component) {
            component = __assign(__assign({}, component), { hideLabel: true, hidden: false });
            var options = __assign(__assign({}, this.options), { onChange: function (flags, changed, modified) {
                    if (!modified) {
                        return;
                    }
                    onChange === null || onChange === void 0 ? void 0 : onChange(changed.value);
                    if (_this.component.inlineEditing && !_.isUndefined(row)) {
                        changed.instance.checkComponentValidity();
                    }
                    ;
                }, readOnly: readOnly });
            // Do not validate the component in the filtering field
            if (_.isUndefined(row)) {
                delete component.validate;
                if (component.type === 'phoneNumber') {
                    component.inputMask = '';
                }
                ;
                // Creating radio fields for filtering Signature and File Components
                if (['signature', 'file', 'checkbox'].includes(component.type)) {
                    component = {
                        optionsLabelPosition: 'right',
                        values: [
                            {
                                label: 'Yes',
                                value: true
                            },
                            {
                                label: 'No',
                                value: false
                            }
                        ],
                        dataType: 'boolean',
                        key: component.key,
                        type: 'radio',
                        hideLabel: true,
                        input: true
                    };
                }
            }
            var comp_1 = this.createComponent(component, options, (_b = {}, _b[key] = value, _b), false, true);
            comp_1.rowIndex = index !== null && index !== void 0 ? index : comp_1.rowIndex;
            comp_1.data = row !== null && row !== void 0 ? row : comp_1.data;
            comp_1.build(element);
            return {
                component: comp_1,
                resetValue: function () {
                    comp_1.resetValue();
                }
            };
        }
        return null;
    };
    DataTableComponent.prototype.customFilters = function (component) {
        return filterByComponentType[component === null || component === void 0 ? void 0 : component.type];
    };
    DataTableComponent.prototype.isSortable = function (component) {
        return !['button', 'htmlelement', 'content'].includes(component.type) && !component.disableSortingAndFiltering;
    };
    DataTableComponent.prototype.isFilterable = function (component) {
        return !['button', 'htmlelement', 'content', 'address', 'datatable', 'editgrid'].includes(component.type) && !component.disableSortingAndFiltering;
    };
    Object.defineProperty(DataTableComponent.prototype, "maxLength", {
        get: function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this.component) === null || _a === void 0 ? void 0 : _a.validate) === null || _b === void 0 ? void 0 : _b.maxLength) !== null && _c !== void 0 ? _c : Infinity;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "minLength", {
        get: function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this.component) === null || _a === void 0 ? void 0 : _a.validate) === null || _b === void 0 ? void 0 : _b.minLength) !== null && _c !== void 0 ? _c : 0;
        },
        enumerable: false,
        configurable: true
    });
    DataTableComponent.prototype.isAttachable = function (type) {
        return this.component.inlineEditing || ['button', 'htmlelement', 'content'].includes(type);
    };
    Object.defineProperty(DataTableComponent.prototype, "visibility", {
        get: function () {
            var _a = this, dataValue = _a.dataValue, savedRows = _a.savedRows;
            if (!savedRows.length) {
                return _.mapValues(this.columns, function (val) {
                    var _a;
                    if (val.hidden && !val.hideColumnByDefault) {
                        return false;
                    }
                    return (_a = !val.hideColumnByDefault) !== null && _a !== void 0 ? _a : true;
                });
            }
            return _.reduce(savedRows, function (vis, row) {
                _.each(row.components, function (comp) {
                    var visible = true;
                    var _a = comp.component, conditional = _a.conditional, logic = _a.logic;
                    var isConditionalPurposeMatched = (conditional === null || conditional === void 0 ? void 0 : conditional.show) === vis[comp.key];
                    var isLogicPurposeMatched = (logic === null || logic === void 0 ? void 0 : logic.length) && logic.some(function (_a) {
                        var actions = _a.actions;
                        return actions.length && actions.some(function (action) {
                            var _a;
                            if (((_a = action.property) === null || _a === void 0 ? void 0 : _a.value) === 'hidden') {
                                var expectedVisibility = !action.state;
                                return expectedVisibility === vis[comp.key];
                            }
                            return false;
                        });
                    });
                    if (vis.hasOwnProperty(comp.key) && (isConditionalPurposeMatched || isLogicPurposeMatched)) {
                        visible = vis[comp.key];
                    }
                    else if (!(logic === null || logic === void 0 ? void 0 : logic.length) || !comp.hasCondition()) {
                        visible = comp.visible;
                    }
                    else if (comp.type === 'hidden' || comp.component.hideColumnByDefault) {
                        visible = false;
                    }
                    else if (typeof comp.checkConditions === 'function') {
                        visible = comp.checkConditions(dataValue, {}, row.data);
                    }
                    vis[comp.key] = visible;
                });
                return vis;
            }, {});
        },
        enumerable: false,
        configurable: true
    });
    DataTableComponent.prototype.updateComponentsVisibility = function () {
        var _a;
        var _b = this, formioGrid = _b.formioGrid, visibility = _b.visibility;
        if ((_a = formioGrid === null || formioGrid === void 0 ? void 0 : formioGrid.component) === null || _a === void 0 ? void 0 : _a.components.length) {
            this.formioGrid.menu.emit('changeVisibility', this.formioGrid.component.components.map(function (comp) {
                var _a;
                return (__assign(__assign({}, comp), { show: (comp.key in visibility) ? visibility[comp.key] : (((_a = !comp.hideColumnByDefault) !== null && _a !== void 0 ? _a : true) && !comp.hidden) }));
            }));
        }
    };
    Object.defineProperty(DataTableComponent.prototype, "fetchProvider", {
        get: function () {
            var _this = this;
            var _a, _b, _c, _d;
            if ((_a = this.component.fetch) === null || _a === void 0 ? void 0 : _a.enableFetch) {
                var Provider = Providers.getProvider('fetch', ((_b = this.component.fetch) === null || _b === void 0 ? void 0 : _b.provider) || 'url');
                if (Provider) {
                    return new Provider({
                        headers: _.map(((_c = this.component.fetch) === null || _c === void 0 ? void 0 : _c.headers) || [], function (header) {
                            header.value = _this.interpolate(header.value);
                            return header;
                        }),
                        url: this.interpolate(this.component.fetch.url),
                        addFormioToken: this.component.fetch && this.component.fetch.authenticate,
                        ignoreCache: !this.component.allowCaching,
                        method: 'GET'
                    });
                }
                /* tslint:disable */
                console.warn((((_d = this.component.fetch) === null || _d === void 0 ? void 0 : _d.provider) || 'url') + " fetch provider is not found.");
                /* tslint:enable */
                return null;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    DataTableComponent.prototype.initFormioGrid = function (FormioGrid) {
        var _this = this;
        var components = [];
        Utils.eachComponent(this.component.components, function (comp) {
            var _a;
            if (comp.tableView || ['htmlelement', 'content'].includes(comp.type)) {
                components.push(__assign(__assign({ type: 'datavalue', sortable: _this.isSortable(comp), show: comp.hidden ? _this.visibility[comp.key] : ((_a = !comp.hideColumnByDefault) !== null && _a !== void 0 ? _a : true), attach: _this.isAttachable(comp.type) ? function (_a) {
                        var _b;
                        var key = _a.key, element = _a.element, value = _a.value, onChange = _a.onChange, row = _a.row, rowIndex = _a.rowIndex, index = _a.index;
                        onChange = onChange !== null && onChange !== void 0 ? onChange : (function (value) {
                            _this.dataValue[index][key] = value;
                            // onChange(value);
                        });
                        value = ((_b = _this.component.fetch) === null || _b === void 0 ? void 0 : _b.enableFetch) ? value : (value !== null && value !== void 0 ? value : _this.dataValue[index][key]);
                        _this.attachComponent({
                            key: key,
                            element: element,
                            value: value,
                            onChange: onChange,
                            row: row,
                            rowIndex: rowIndex,
                            index: index,
                            readOnly: _this.options.readOnly || _this.component.disabled
                        });
                    } : null }, comp), { filterable: _this.isFilterable(comp) }));
                _this.columns[comp.key] = comp;
            }
            return ['datagrid', 'editgrid', 'datamap', 'datatable', 'tree', 'container'].includes(comp.type);
        }, true);
        components.sort(function (a, b) { var _a, _b; return ((_a = a.columnWeight) !== null && _a !== void 0 ? _a : 0) - ((_b = b.columnWeight) !== null && _b !== void 0 ? _b : 0); });
        var _a = this.component, sortable = _a.sortable, filterable = _a.filterable, disabled = _a.disabled, cellMaxWidth = _a.cellMaxWidth, clipCells = _a.clipCells, itemsPerPage = _a.itemsPerPage, _b = _a.showAddBtn, showAddBtn = _b === void 0 ? true : _b, _c = _a.showEditBtn, showEditBtn = _c === void 0 ? true : _c, _d = _a.showDeleteBtn, showDeleteBtn = _d === void 0 ? true : _d, showDeleteAllBtn = _a.showDeleteAllBtn, fetch = _a.fetch, _e = _a.isSubmitData, isSubmitData = _e === void 0 ? false : _e, hideLabel = _a.hideLabel;
        var _f = this.options, readOnly = _f.readOnly, _g = _f.pdf, pdf = _g === void 0 ? false : _g;
        this.initComponents = this.createRowComponents({}, 0);
        return FormioGrid.render(this.refs.tableContainer, {
            components: components,
            fetch: fetch,
            isSubmitData: isSubmitData,
            hideLabel: hideLabel,
            pagination: {
                itemsPerPage: itemsPerPage || 10,
            },
            cellMaxWidth: cellMaxWidth,
            clipCells: clipCells,
            showAddBtn: showAddBtn && (!this.maxLength || this.maxLength > this.dataValue.length),
            showEditBtn: showEditBtn,
            showDeleteBtn: showDeleteBtn && this.minLength < this.dataValue.length,
            showDeleteAllBtn: showDeleteAllBtn
        }, {
            sortable: sortable,
            filterable: filterable,
            readOnly: readOnly || disabled,
            actions: this.options.dataTableActions,
            fetchProvider: this.fetchProvider,
            hooks: {
                attachFilter: this.attachComponent.bind(this),
                format: function (key, value) { return _this.format(key, value); },
                filter: function (key) { return _this.customFilters(_this.columns[key]); },
                transformData: function (responseData) { return _this.transformFetchedData(responseData); },
            },
            pdf: pdf
        }, this.dataValue)
            .then(function (formioGrid) {
            var _a;
            _this.formioGrid = formioGrid;
            _this.formioGrid.on('rowAdd', function () {
                _this.emit('rowAdd', _this);
                _this.onAddRow();
            });
            _this.formioGrid.on('rowEdit', function (data, rowIndex, index) {
                _this.emit('rowEdit', data, rowIndex, index, _this);
                _this.onEditRow(data, rowIndex, index);
            });
            _this.formioGrid.on('rowDelete', function (data, rowIndex, index) {
                if (window.confirm('Are you sure you wish to delete the row?')) {
                    _this.emit('rowDelete', data, rowIndex, index, _this);
                    if (!_.isEqual(_this.dataValue[index], data)) {
                        index = _.findIndex(_this.dataValue, data);
                    }
                    ;
                    _this.dataValue.splice(index, 1);
                    _this.savedRows.splice(index, 1);
                    _this.setValue(_this.dataValue);
                }
            });
            _this.formioGrid.on('deleteAll', function () {
                if (window.confirm(_this.component.deleteAllConfirmationMessage)) {
                    _this.emit('deleteAll', _this);
                    _this.dataValue = _this.defaultValue;
                    _this.setValue(_this.dataValue);
                }
            });
            _this.formioGrid.on('rowClick', function (row, rowIndex, index, event) {
                _this.emit('rowClick', row, rowIndex, index, _this);
            });
            _this.formioGrid.on('rowSelectChange', function (rows) {
                _this.emit('rowSelectChange', rows, _this);
            });
            (_a = _this.component.customHeaderElements) === null || _a === void 0 ? void 0 : _a.forEach(function (element) {
                _this.formioGrid.on(element.customBtnEvent, function () {
                    _this.emit(element.customBtnEvent, _this);
                });
            });
            _this.formioGrid.on('page', function (currentPage, viewGrid) {
                var _a, _b;
                if (((_a = _this.component.fetch) === null || _a === void 0 ? void 0 : _a.enableFetch) && ((_b = _this.component.fetch) === null || _b === void 0 ? void 0 : _b.url) && viewGrid && !_this.builderMode) {
                    _this.setValue(viewGrid);
                    _this.triggerChange();
                }
                _this.emit('page', currentPage, _this, viewGrid);
            });
            _this.formioGrid.on('changeItemsPerPage', function (itemsPerPage) {
                _this.emit('changeItemsPerPage', itemsPerPage);
            });
        });
    };
    DataTableComponent.prototype.transformFetchedData = function (responseData) {
        var transformFunction = Utils._.get(this.component, 'fetch.mapFunction');
        if (!transformFunction) {
            return responseData;
        }
        var result = null;
        try {
            result = this.evaluate(transformFunction, { responseData: responseData }, 'value');
        }
        catch (e) {
            result = responseData;
        }
        return result;
    };
    DataTableComponent.prototype.createRowComponents = function (row, rowIndex) {
        var components = _super.prototype.createRowComponents.call(this, row, rowIndex);
        if (this.disabled) {
            components.forEach(function (component) {
                component.disabled = true;
            });
        }
        return components;
    };
    DataTableComponent.prototype.createComponent = function (component, options, data, before, fromAttach) {
        var comp = _super.prototype.createComponent.call(this, component, options, data, before);
        if (fromAttach) {
            var visibility = this.visibility;
            if (visibility.hasOwnProperty(component.key) && comp.visible !== visibility[component.key]) {
                comp.visible = visibility[component.key];
            }
        }
        comp.inDataTable = true;
        return comp;
    };
    DataTableComponent.prototype.getComponents = function (rowIndex) {
        var _a;
        this.savedRows = this.savedRows || [];
        return this.builderMode
            ? _super.prototype.getComponents.call(this)
            : _.isNumber(rowIndex)
                ? (((_a = this.savedRows[rowIndex]) === null || _a === void 0 ? void 0 : _a.components) || [])
                : this.savedRows.reduce(function (result, row) { return result.concat(row.components || []); }, []);
    };
    DataTableComponent.prototype.beforeFocus = function (component) {
        var rowIndex = this.savedRows.findIndex(function (row) { return row.components.find(function (c) { return component === c; }); });
        if (_.isNumber(rowIndex) && !this.builderMode) {
            this.onEditRow(this.dataValue[rowIndex], rowIndex, rowIndex);
        }
    };
    DataTableComponent.prototype.onAddRow = function () {
        if (this.options.readOnly) {
            return;
        }
        var dataObj = {};
        this.editRows = [
            {
                components: this.createRowComponents(dataObj, 0),
                data: dataObj,
                state: 'new',
                index: this.dataValue.length
            },
        ];
        this.openModal();
        this.redraw();
    };
    DataTableComponent.prototype.onEditRow = function (row, rowIndex, index) {
        var dataObj = __assign({}, row);
        // const index = this.dataValue.indexOf(row);
        this.editRows = [
            {
                components: this.createRowComponents(dataObj, index),
                data: dataObj,
                state: 'editing',
                index: index
            },
        ];
        this.openModal();
        this.redraw();
    };
    DataTableComponent.prototype.cancelRow = function () {
        this.closeModal();
    };
    DataTableComponent.prototype.saveRow = function (rowIndex, modified) {
        var _a;
        var editRow = this.editRows[rowIndex];
        var isRowValid = this.validateRow(editRow, true);
        if (!isRowValid) {
            var errors = editRow.components.filter(function (c) { return c.error; }).map(function (c) { return c.error; });
            var errorsList = this.renderTemplate('errorsList', { errors: errors });
            this.root.setAlert.call(this.editRows[0].components[0], 'danger', errorsList);
            // this.checkValidity(this.root.data, true, this.root.data)
            return false;
        }
        if (editRow.state === 'editing') {
            this.dataValue[editRow.index] = editRow.data;
            editRow.state = 'saved';
            this.savedRows[editRow.index] = editRow;
            this.editRows = [];
            this.setValue(this.dataValue);
            this.emit('rowEdited', editRow.data, editRow.index, this);
        }
        else {
            this.dataValue.unshift(editRow.data);
            editRow.state = 'saved';
            this.savedRows.unshift(editRow);
            this.editRows = [];
            this.setValue(this.dataValue);
            this.emit('rowAdded', editRow.data, this);
        }
        this.closeModal();
        // this.checkValidity(this.root.data, true, this.root.data);
        var isValid = this.checkData(this.root.data, true, editRow.data, false);
        if (!isValid) {
            (_a = this.root) === null || _a === void 0 ? void 0 : _a.showErrors();
        }
        else {
            this.redraw();
        }
    };
    DataTableComponent.prototype.format = function (key, data) {
        var component = this.columns[key];
        if (!component) {
            return data;
        }
        var instance = Utils.getComponent(this.initComponents, key, true) || Components.create(component, this.options, data, true);
        return instance.getView(data);
    };
    Object.defineProperty(DataTableComponent.prototype, "iteratableRows", {
        get: function () {
            return this.savedRows || [];
        },
        enumerable: false,
        configurable: true
    });
    DataTableComponent.prototype.setValue = function (value, flags) {
        var _this = this;
        var _a, _b, _c, _d;
        if (flags === void 0) { flags = {}; }
        if (this.builderMode) {
            return;
        }
        if (((_a = this.component.fetch) === null || _a === void 0 ? void 0 : _a.enableFetch) && ((_b = this.component.fetch) === null || _b === void 0 ? void 0 : _b.url) && !this.builderMode) {
            this.dataValue = value;
            return;
        }
        if (!value && !((_c = this.component.fetch) === null || _c === void 0 ? void 0 : _c.enableFetch)) {
            value = this.defaultValue;
        }
        this.dataValue = value;
        this.savedRows = this.dataValue.map(function (data, index) { return ({
            components: _this.createRowComponents(data, 0),
            data: data,
            state: 'saved',
            index: index,
        }); });
        this.checkData();
        if (this.formioGrid && !((_d = this.component.fetch) === null || _d === void 0 ? void 0 : _d.enableFetch)) {
            this.formioGrid.component.showAddBtn = this.component.showAddBtn && this.maxLength > this.dataValue.length;
            this.formioGrid.component.showDeleteBtn = this.component.showDeleteBtn && this.minLength < this.dataValue.length;
            this.formioGrid.component.showDeleteAllBtn = this.component.showDeleteAllBtn;
            this.formioGrid.setData(this.dataValue);
            this.updateComponentsVisibility();
            this.formioGrid.refreshGrid();
        }
    };
    DataTableComponent.prototype.updateValue = function (value, flags) {
        if (flags === void 0) { flags = {}; }
        _super.prototype.updateValue.call(this, value, flags);
    };
    DataTableComponent.prototype.destroy = function () {
        var _a, _b;
        _super.prototype.destroy.call(this);
        this.emit('destroy');
        (_b = (_a = this.formioGrid) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    DataTableComponent.prototype.openModal = function () {
        var _a, _b;
        this.isModalOpened = true;
        (_a = this.refs.dataTableModalWrapper) === null || _a === void 0 ? void 0 : _a.classList.add('formio-dialog-disabled-animation');
        (_b = this.refs.dataTableModalWrapper) === null || _b === void 0 ? void 0 : _b.classList.remove('component-rendering-hidden');
    };
    DataTableComponent.prototype.closeModal = function () {
        var _a, _b;
        (_a = this.refs.dataTableModalWrapper) === null || _a === void 0 ? void 0 : _a.classList.remove('formio-dialog-disabled-animation');
        (_b = this.refs.dataTableModalWrapper) === null || _b === void 0 ? void 0 : _b.classList.add('component-rendering-hidden');
        this.isModalOpened = false;
        this.editRows = [];
        this.checkValidity(this.root.data, true, this.root.data);
    };
    DataTableComponent.prototype.attachModal = function (element) {
        var _this = this;
        this.loadRefs(element, {
            dataTableModalOverlay: 'single',
            dataTableModalContents: 'single',
            dataTableModalClose: 'single',
            dataTableModalWrapper: 'single',
        });
        if (this.isModalOpened) {
            this.openModal();
        }
        else {
            this.closeModal();
        }
        this.addEventListener(this.refs.dataTableModalOverlay, 'click', function () { return _this.closeModal(); });
        this.addEventListener(this.refs.dataTableModalClose, 'click', function () { return _this.closeModal(); });
    };
    DataTableComponent.prototype.resetValue = function () {
        _super.prototype.resetValue.call(this);
        this.closeModal();
    };
    DataTableComponent.prototype.beforeSubmit = function () {
        var _a;
        if (!this.component.isSubmitData || ((_a = this.component.fetch) === null || _a === void 0 ? void 0 : _a.enableFetch)) {
            this.dataValue = [];
        }
        return _super.prototype.beforeSubmit.call(this);
    };
    DataTableComponent.editForm = editForm;
    return DataTableComponent;
}(EditGridComponent));
export default DataTableComponent;
