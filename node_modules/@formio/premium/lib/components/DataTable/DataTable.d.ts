import editForm from './DataTable.form';
import './DataTableFormioIntegration';
declare const DataTableComponent_base: any;
export default class DataTableComponent extends DataTableComponent_base {
    static editForm: typeof editForm;
    static schema(...extend: any[]): any;
    static get builderInfo(): {
        title: string;
        group: string;
        icon: string;
        weight: number;
        documentation: string;
        schema: any;
    };
    FormioCore: any;
    formioGrid: any;
    editRows: any[];
    savedRows: any[];
    isModalOpened: boolean;
    columns: {};
    initComponents: any[];
    dataTableReady: any;
    constructor(...args: any[]);
    get dataReady(): any;
    render(children: any): any;
    attach(element: any): any;
    loadFormioGrid(): any;
    attachComponent({ key, element, value, onChange, row, rowIndex, index, readOnly }: {
        key: any;
        element: any;
        value: any;
        onChange: any;
        row: any;
        rowIndex: any;
        index: any;
        readOnly: any;
    }): {
        component: any;
        resetValue: () => void;
    };
    customFilters(component: any): any;
    isSortable(component: any): boolean;
    isFilterable(component: any): boolean;
    get maxLength(): any;
    get minLength(): any;
    isAttachable(type: any): any;
    get visibility(): any;
    updateComponentsVisibility(): void;
    get fetchProvider(): any;
    initFormioGrid(FormioGrid: any): Promise<any>;
    transformFetchedData(responseData: any): any;
    createRowComponents(row: any, rowIndex: any): any;
    createComponent(component: any, options: any, data: any, before?: any, fromAttach?: any): any;
    getComponents(rowIndex: any): any;
    beforeFocus(component: any): void;
    onAddRow(): void;
    onEditRow(row: any, rowIndex: any, index: any): void;
    cancelRow(): void;
    saveRow(rowIndex: any, modified: any): boolean;
    format(key: string, data: any): any;
    get iteratableRows(): any[];
    setValue(value: any, flags?: {}): void;
    updateValue(value: any, flags?: {}): void;
    destroy(): void;
    openModal(): void;
    closeModal(): void;
    attachModal(element: any): void;
    resetValue(): void;
    beforeSubmit(): any;
}
export {};
