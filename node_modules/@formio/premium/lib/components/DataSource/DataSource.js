var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Components, Utils, Providers } from 'formiojs';
import editForm from './DataSource.form';
import * as _ from 'lodash';
var Component = Components.components.component;
var DataSource = /** @class */ (function (_super) {
    __extends(DataSource, _super);
    function DataSource(component, options, data) {
        return _super.call(this, component, options, data) || this;
    }
    Object.defineProperty(DataSource, "builderInfo", {
        get: function () {
            return {
                title: 'Data Source',
                icon: 'cloud',
                group: 'premium',
                documentation: '/userguide/forms/premium-components#data-source',
                weight: 30,
                schema: DataSource.schema(),
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "requestHeaders", {
        /**
         * Get the request headers for this select dropdown.
         */
        get: function () {
            var _this = this;
            var _a;
            var hasContentTypeHeader = false;
            var headers = _.map(((_a = this.component.fetch) === null || _a === void 0 ? void 0 : _a.headers) || [], function (header) {
                header.value = _this.interpolate(header.value);
                if (header.key === 'Content-type') {
                    hasContentTypeHeader = true;
                }
                return header;
            });
            if (this.reqMethod === 'POST' && !hasContentTypeHeader) {
                headers.push({ key: 'Content-type', value: 'application/json' });
            }
            return headers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "reqMethod", {
        get: function () {
            var method = Utils._.get(this.component, 'fetch.method', 'get');
            return method.toUpperCase();
        },
        enumerable: false,
        configurable: true
    });
    DataSource.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return Component.schema.apply(Component, __spreadArrays([{
                label: 'Data Source',
                key: 'dataSource',
                type: 'datasource',
                persistent: 'client-only',
            }], extend));
    };
    DataSource.prototype.init = function () {
        if (Utils._.get(this.component, 'trigger.init', false)) {
            this.refresh();
        }
        return _super.prototype.init.call(this);
    };
    DataSource.prototype.render = function () {
        if (this.builderMode) {
            return _super.prototype.render.call(this, this.component.label || 'Data Source');
        }
        // Is there a better way to be hidden on the page?
        return _super.prototype.render.call(this, ' ');
    };
    DataSource.prototype.attach = function (element) {
        this.attachRefreshOnBlur();
        this.attachRefreshOnEvent();
        return _super.prototype.attach.call(this, element);
    };
    DataSource.prototype.attachRefreshOnBlur = function () {
        var _this = this;
        if (this.component.refreshOnBlur) {
            this.on('blur', function (instance) {
                _this.checkRefreshOn([{ instance: instance, value: instance.dataValue }], { fromBlur: true });
            });
        }
    };
    DataSource.prototype.attachRefreshOnEvent = function () {
        var _this = this;
        if (this.component.refreshOnEvent) {
            this.on(this.component.refreshOnEvent, function () { return _this.refresh(); });
        }
    };
    DataSource.prototype.dettachRefreshOnBlur = function () {
        if (this.component.refreshOnBlur) {
            this.off('blur');
        }
    };
    DataSource.prototype.dettachRefreshOnEvent = function () {
        if (this.component.refreshOnEvent) {
            this.off(this.component.refreshOnEvent);
        }
    };
    DataSource.prototype.refresh = function (value, changed, flags) {
        if ((!this.options.readOnly && !(flags === null || flags === void 0 ? void 0 : flags.fromSubmission)) || this.options.pdf) {
            switch (this.component.dataSrc) {
                case 'url':
                    this.getDataFromUrl(flags);
                    break;
                case 'indexeddb':
                    if (!window.indexedDB) {
                        window.alert("Your browser doesn't support current version of indexedDB");
                    }
                    this.getDataFromIndexedDb(flags);
                    break;
                case 'custom':
                    // TODO: Implement custom async code?
                    break;
            }
        }
    };
    DataSource.prototype.getDataFromUrl = function (flags) {
        var _this = this;
        var _a;
        var Provider = Providers.getProvider('fetch', this.component.dataSrc);
        var request = Promise.resolve();
        if (Provider) {
            var body = null;
            var isBody = !!Utils._.get(this.component, 'fetch.specifyPostBody', '');
            if (isBody && this.reqMethod === 'POST') {
                body = this.specifyBody();
            }
            var fetchProvider = new Provider({
                headers: this.requestHeaders,
                url: this.interpolate(this.component.fetch.url),
                addFormioToken: this.component.fetch && this.component.fetch.authenticate,
                ignoreCache: !this.component.allowCaching,
                method: this.reqMethod,
                body: body
            });
            request = fetchProvider.getData();
        }
        Promise.all([
            request,
            ((_a = this.root) === null || _a === void 0 ? void 0 : _a.formReady) ? this.root.formReady : Promise.resolve()
        ])
            .then(function (data) {
            setTimeout(function () {
                _this.assign(data[0], flags);
            });
        })
            .catch(function (err) {
            _this.emit('requestError', err);
            /* tslint:disable */
            console.warn(err);
            /* tslint:enable */
        });
    };
    DataSource.prototype.getDataFromIndexedDb = function (flags) {
        var _this = this;
        var Provider = Providers.getProvider('fetch', this.component.dataSrc);
        if (Provider) {
            var _a = this.component, indexeddb = _a.indexeddb, customOptions = _a.customOptions;
            var fetchProvider = new Provider({
                indexeddb: indexeddb,
                customOptions: customOptions
            });
            fetchProvider.getData().then(function (items) { return _this.assign(items, flags); });
        }
    };
    DataSource.prototype.assign = function (data, flags) {
        data = this.mapData(data);
        if (!Utils._.isEqual(this.dataValue, data)) {
            this.dataValue = data;
            this.triggerChange(flags && flags.fromSubmission ? { dataSourceInitialLoading: true } : null);
        }
        if (this.component.event) {
            this.emitEvents();
        }
    };
    DataSource.prototype.emitEvents = function () {
        this.emit(this.interpolate(this.component.event), this.data);
        this.events.emit(this.interpolate(this.component.event), this.data);
        this.emit('customEvent', {
            type: this.interpolate(this.component.event),
            component: this.component,
            data: this.data,
        });
    };
    DataSource.prototype.validateMultiple = function () {
        // DataSource component can have both values.
        return false;
    };
    DataSource.prototype.specifyBody = function () {
        var result = null;
        try {
            result = this.evaluate(this.component.fetch.specifyPostBody, {
                value: this.dataValue,
                row: this.data,
                data: this.rootValue,
                component: this.component,
            }, 'body');
        }
        catch (e) {
            result = null;
        }
        return result;
    };
    ;
    DataSource.prototype.mapData = function (responseData) {
        var mapFunction = Utils._.get(this.component, 'fetch.mapFunction');
        if (!mapFunction) {
            return responseData;
        }
        var result = null;
        try {
            result = this.evaluate(mapFunction, {
                responseData: responseData,
                value: this.dataValue,
                row: this.data,
                data: this.rootValue,
                component: this.component,
            }, 'value');
        }
        catch (e) {
            result = null;
        }
        return result;
    };
    ;
    DataSource.prototype.destroy = function () {
        this.dettachRefreshOnBlur();
        this.dettachRefreshOnEvent();
        return _super.prototype.destroy.call(this);
    };
    DataSource.editForm = editForm;
    return DataSource;
}(Component));
export default DataSource;
