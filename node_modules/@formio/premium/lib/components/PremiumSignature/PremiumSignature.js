var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Components } from 'formiojs';
var SignatureComponent = Components.components.signature;
var Field = Components.components.field;
import editForm from './PremiumSignature.form';
import * as _ from 'lodash';
import { TagType } from '../../providers/esign/TagType';
var PremiumSignatureComponent = /** @class */ (function (_super) {
    __extends(PremiumSignatureComponent, _super);
    function PremiumSignatureComponent() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.downloadURL = '';
        return _this;
    }
    PremiumSignatureComponent.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return SignatureComponent.schema.apply(SignatureComponent, __spreadArrays([{
                type: 'signature',
                label: 'Signature',
                key: 'premiumsignature',
                hideLabel: true,
            }], extend));
    };
    Object.defineProperty(PremiumSignatureComponent, "builderInfo", {
        get: function () {
            return {
                title: 'Signature',
                icon: 'edit',
                group: 'premium',
                documentation: '',
                weight: 120,
                schema: PremiumSignatureComponent.schema()
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PremiumSignatureComponent, "simpleConditionSettings", {
        get: function () {
            return __assign(__assign({}, _super.simpleConditionSettings), { operators: ['isEmpty', 'isNotEmpty'] });
        },
        enumerable: false,
        configurable: true
    });
    PremiumSignatureComponent.prototype.init = function () {
        var _this = this;
        _super.prototype.init.call(this);
        if (!this.options.building && !this.isDefaultProvider() && !this.options.readOnly) {
            if (!this.hasEventHandler('submitDone')) {
                this.once('submitDone', function (submission) {
                    var esign = submission.data.esign;
                    if (esign && esign.signers) {
                        var redirectSigner = _.find(esign.signers, function (signer) {
                            return !_.isEmpty(signer.embed_url);
                        });
                        if (redirectSigner) {
                            window.location.replace(redirectSigner.embed_url);
                        }
                    }
                });
            }
            this.on('beforeSetSubmission', function (submission) {
                var esign = _.get(submission.data, 'esign');
                if (esign) {
                    _.set(_this.root.data, 'esign', esign);
                }
            });
        }
    };
    Object.defineProperty(PremiumSignatureComponent.prototype, "defaultSchema", {
        get: function () {
            return PremiumSignatureComponent.schema();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PremiumSignatureComponent.prototype, "allowData", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PremiumSignatureComponent.prototype, "styles", {
        get: function () {
            var height = this.component.overlay.height;
            var building = this.options.building;
            var pdf = this.options.display === 'pdf' || this.options.pdf;
            var defaultHeight = building ? 40 : 50;
            var fontSize = building ? 24 : 50;
            var color = 'fff';
            if (pdf && this.options.building) {
                color = '000';
            }
            if (height && building) {
                fontSize = height * 0.5;
            }
            else if (height && pdf) {
                fontSize = height;
            }
            return "\n      height: " + (height || defaultHeight) + "px;\n      font-size: " + fontSize + "px;\n      line-height: " + (height || defaultHeight) + "px;\n      width: max-content;\n      color: #fff;\n    ";
        },
        enumerable: false,
        configurable: true
    });
    PremiumSignatureComponent.prototype.buildTag = function () {
        var order = 1;
        if (this.component.order) {
            order = this.component.order;
        }
        switch (this.component.provider.tagtype) {
            case TagType.S_Bracket:
                return '[[s|' + order + ']]';
            default:
                return '';
        }
    };
    PremiumSignatureComponent.prototype.attach = function (element) {
        return _super.prototype.attach.call(this, element);
    };
    PremiumSignatureComponent.prototype.detach = function (element) {
        return _super.prototype.detach.call(this, element);
    };
    PremiumSignatureComponent.prototype.isDefaultProvider = function () {
        return !this.component.provider || !this.component.provider.name || this.component.provider.name === 'default';
    };
    PremiumSignatureComponent.prototype.render = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.isDefaultProvider()) {
            return _super.prototype.render.apply(this, args);
        }
        return Field.prototype.render.call(this, this.renderTemplate('premiumsignature', {
            isPDF: this.options.display === 'pdf' || this.options.pdf,
            styles: this.styles,
            tag: this.buildTag(),
            eSignType: this.component.provider.name,
            downloadURL: this.downloadURL
        }));
    };
    PremiumSignatureComponent.prototype.destroy = function () {
        this.off('formLoad');
        this.off('addComponent');
        this.off('formDelete');
        this.off('submitDone');
        _super.prototype.destroy.call(this);
    };
    PremiumSignatureComponent.editForm = editForm;
    PremiumSignatureComponent.downloadURL = '';
    return PremiumSignatureComponent;
}(SignatureComponent));
export default PremiumSignatureComponent;
