var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Components, Formio } from 'formiojs';
import editForm from './SignRequestSignature.form';
var Field = Components.components.field;
var checkSignRequestActionSetUp = function () {
    var paths = Formio.pageQuery().paths;
    var formId = paths.includes('form') && paths[paths.indexOf('form') + 1];
    if (formId.length === 24) {
        var url = Formio.getProjectUrl() + "/form/" + formId + "/action";
        Formio.makeStaticRequest(url, 'get').then(function (actions) {
            if (Array.isArray(actions) && actions.length) {
                SignRequestSignatureComponent.actionSetUp = !!actions.find(function (action) { return action.name === 'signrequest'; });
            }
        });
    }
};
var SignRequestSignatureComponent = /** @class */ (function (_super) {
    __extends(SignRequestSignatureComponent, _super);
    function SignRequestSignatureComponent() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.actionSetUp = false;
        return _this;
    }
    SignRequestSignatureComponent.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return Field.schema.apply(Field, __spreadArrays([{
                type: 'signrequestsignature',
                label: 'SignRequest Signature',
                key: 'signrequestsignature',
                input: false,
                hideLabel: true,
            }], extend));
    };
    Object.defineProperty(SignRequestSignatureComponent, "builderInfo", {
        get: function () {
            return {
                title: 'SignRequest Signature',
                icon: 'edit',
                group: 'premium',
                documentation: '/userguide/#signrequestsignature',
                weight: 120,
                schema: SignRequestSignatureComponent.schema()
            };
        },
        enumerable: false,
        configurable: true
    });
    SignRequestSignatureComponent.prototype.init = function () {
        _super.prototype.init.call(this);
        if (this.builderMode) {
            if (!this.hasEventHandler('formLoad')) {
                this.on('formLoad', checkSignRequestActionSetUp);
            }
            if (!this.hasEventHandler('addComponent')) {
                this.on('addComponent', function (comp) {
                    if (comp.type === 'signrequestsignature') {
                        checkSignRequestActionSetUp();
                    }
                });
            }
            if (!this.hasEventHandler('formDelete')) {
                this.on('formDelete', function () {
                    SignRequestSignatureComponent.actionSetUp = true;
                });
            }
        }
        if (!this.options.building) {
            SignRequestSignatureComponent.actionSetUp = true;
            var _a = this.component, email = _a.email, name_1 = _a.name, order = _a.order;
            this.dataValue = {
                email: email,
                'first_name': name_1 || '',
                order: order
            };
            if (+order === 0 && !this.hasEventHandler('submit')) {
                this.once('submit', function (submission) {
                    var signrequest = submission.data.signrequest;
                    if (signrequest && signrequest.embedUrl) {
                        window.open(signrequest.embedUrl);
                    }
                });
            }
        }
    };
    Object.defineProperty(SignRequestSignatureComponent.prototype, "defaultSchema", {
        get: function () {
            return SignRequestSignatureComponent.schema();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SignRequestSignatureComponent.prototype, "emptyValue", {
        get: function () {
            return {};
        },
        enumerable: false,
        configurable: true
    });
    SignRequestSignatureComponent.prototype.setValue = function (value, flags) {
        if (flags === void 0) { flags = {}; }
        var changed = _super.prototype.setValue.call(this, value, flags);
        return changed;
    };
    SignRequestSignatureComponent.prototype.hasValue = function () {
        return !!this.component.order;
    };
    Object.defineProperty(SignRequestSignatureComponent.prototype, "allowData", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SignRequestSignatureComponent.prototype, "styles", {
        get: function () {
            var height = this.component.overlay.height;
            var _a = this.options, building = _a.building, pdf = _a.pdf;
            var defaultHeight = building ? 40 : 50;
            var fontSize = building ? 24 : 50;
            if (height && building) {
                fontSize = height * 0.5;
            }
            else if (height && pdf) {
                fontSize = height;
            }
            return "\n      height: " + (height || defaultHeight) + "px;\n      font-size: " + fontSize + "px;\n      line-height: " + (height || defaultHeight) + "px;\n      width: max-content;\n    ";
        },
        enumerable: false,
        configurable: true
    });
    SignRequestSignatureComponent.prototype.render = function () {
        return _super.prototype.render.call(this, this.renderTemplate('signrequestsignature', {
            isPDF: this.options.pdf,
            isBuilder: this.options.building,
            actionSetUp: SignRequestSignatureComponent.actionSetUp,
            styles: this.styles
        }));
    };
    SignRequestSignatureComponent.prototype.destroy = function () {
        this.off('formLoad');
        this.off('addComponent');
        this.off('formDelete');
        this.off('submitDone');
        _super.prototype.destroy.call(this);
    };
    SignRequestSignatureComponent.editForm = editForm;
    SignRequestSignatureComponent.actionSetUp = true;
    return SignRequestSignatureComponent;
}(Field));
export default SignRequestSignatureComponent;
