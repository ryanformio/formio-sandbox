var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Components } from 'formiojs';
var FormioComponent = Components.components.component;
var formioComponentEditForm = FormioComponent.editForm;
import { BrowserMultiFormatReader, NotFoundException } from '@zxing/library';
var CodeReader = /** @class */ (function (_super) {
    __extends(CodeReader, _super);
    function CodeReader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CodeReader.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        return FormioComponent.schema.apply(FormioComponent, __spreadArrays([{
                label: 'Code Reader',
                type: 'codereader',
                key: 'codeReader',
            }], extend));
    };
    Object.defineProperty(CodeReader, "builderInfo", {
        get: function () {
            return {
                title: 'Code Reader',
                group: 'premium',
                icon: 'barcode',
                weight: 20,
                schema: CodeReader.schema(),
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeReader, "readCodeButtonRef", {
        get: function () {
            return 'readCodeButton';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeReader.prototype, "readCodeButton", {
        get: function () {
            return this.refs
                ? (this.refs[CodeReader.readCodeButtonRef] || null)
                : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeReader.prototype, "renderContext", {
        get: function () {
            return {
                label: this.component.label,
                dataValue: this.dataValue,
                ref: CodeReader.readCodeButtonRef,
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CodeReader.prototype, "templateName", {
        get: function () {
            return 'codereader';
        },
        enumerable: false,
        configurable: true
    });
    CodeReader.prototype.render = function () {
        return _super.prototype.render.call(this, this.renderTemplate(this.templateName, __assign({}, this.renderContext)));
    };
    CodeReader.prototype.attachVideoSource = function () {
        var _this = this;
        this.videoContainer = this.ce('div', {
            class: 'formio-codereader-video-container'
        });
        this.videoClose = this.ce('i', {
            class: 'fa fa-times fa-3x formio-codereader-video-close',
        });
        this.videoClose.addEventListener('click', function () { return _this.detachVideoSource(); });
        this.videoSwitch = this.ce('i', {
            class: 'fa fa-refresh fa-3x formio-codereader-video-switch',
        });
        this.videoSwitch.addEventListener('click', this.switchVideoDevice);
        this.videoSource = this.ce('video', {
            id: this.id + "-video",
            class: 'formio-codereader-video-source'
        });
        this.videoContainer.appendChild(this.videoSource);
        this.videoContainer.appendChild(this.videoSwitch);
        this.videoContainer.appendChild(this.videoClose);
        document.body.appendChild(this.videoContainer);
    };
    CodeReader.prototype.detachVideoSource = function () {
        this.codeReader.reset();
        document.body.removeChild(this.videoContainer);
    };
    CodeReader.prototype.decodeFromVideo = function (videoDevice) {
        var _this = this;
        if (videoDevice) {
            var deviceId = videoDevice.deviceId;
            this.codeReader.decodeOnceFromVideoDevice(deviceId, this.id + "-video")
                .then(function (result) {
                _this.updateValue(result.getText(), {
                    modified: true,
                });
                _this.detachVideoSource();
                _this.redraw();
            })
                .catch(function (err) {
                if (err && !(err instanceof NotFoundException)) {
                    // tslint:disable-next-line: no-console
                    console.warn('Decoding error: ', err);
                }
            });
        }
    };
    CodeReader.prototype.receiveVideoDevices = function () {
        var _this = this;
        this.codeReader = new BrowserMultiFormatReader();
        var _a = this.codeReader, canEnumerateDevices = _a.canEnumerateDevices, isMediaDevicesSuported = _a.isMediaDevicesSuported;
        if (isMediaDevicesSuported && canEnumerateDevices) {
            this.codeReader
                .listVideoInputDevices()
                .then(function (videoInputDevices) {
                _this.videoInputDevices = videoInputDevices;
                _this.currentVideoDeviceNumber = 0;
                if (_this.videoInputDevices.length) {
                    _this.decodeFromVideo(_this.videoInputDevices[_this.currentVideoDeviceNumber]);
                }
                else {
                    _this.setWarning(true);
                }
            })
                // tslint:disable-next-line: no-console
                .catch(function (err) { return console.warn('Devices list error: ', err); });
        }
        else {
            this.setWarning();
        }
    };
    CodeReader.prototype.setWarning = function (isNoDevice) {
        if (isNoDevice === void 0) { isNoDevice = false; }
        var messageText = isNoDevice
            ? 'Your browser doesn`t have media devices.'
            : 'Your browser doesn`t support media devices.';
        this.videoSwitch.removeEventListener('click', this.switchVideoDevice);
        this.videoContainer.removeChild(this.videoSwitch);
        this.unsupportMessage = this.ce('span', {
            class: 'formio-codereader-unsupport'
        });
        this.unsupportMessage.innerHTML = messageText;
        this.videoContainer.appendChild(this.unsupportMessage);
    };
    CodeReader.prototype.switchVideoDevice = function () {
        if (this.videoInputDevices) {
            if (this.currentVideoDeviceNumber < this.videoInputDevices.length - 1) {
                this.currentVideoDeviceNumber = this.currentVideoDeviceNumber + 1;
            }
            else {
                this.currentVideoDeviceNumber = 0;
            }
            this.decodeFromVideo(this.videoInputDevices[this.currentVideoDeviceNumber]);
        }
    };
    CodeReader.prototype.attach = function (element) {
        var _a;
        var _this = this;
        var result = _super.prototype.attach.call(this, element);
        if (!this.builderMode) {
            this.loadRefs(element, (_a = {},
                _a[CodeReader.readCodeButtonRef] = 'single',
                _a));
            if (this.readCodeButton) {
                this.addEventListener(this.readCodeButton, 'click', function () {
                    _this.attachVideoSource();
                    _this.receiveVideoDevices();
                });
            }
        }
        return result;
    };
    CodeReader.editForm = formioComponentEditForm;
    return CodeReader;
}(FormioComponent));
export default CodeReader;
