import editForm from './Sketchpad.form';
interface IViewBox {
    minX: number;
    minY: number;
    width: number;
    height: number;
}
interface IDrawingState {
    mode: string;
    stroke: string;
    fill: string;
    circleSize: number;
    linewidth: number;
    viewBox?: IViewBox;
}
interface IDrawingMode {
    state: {
        mode: string;
    };
    cursor?: {
        hover?: string;
        clicked?: string;
    };
    eventStart: (coordinate: {
        x: number;
        y: number;
    }) => void;
    eventEnd?: (coordinate?: {
        x: number;
        y: number;
    }) => void;
    drag?: (coordinate: {
        x: number;
        y: number;
    }) => void;
    draw?: (state: IDrawingState) => SVGSVGElement;
}
declare const Sketchpad_base: any;
export default class Sketchpad extends Sketchpad_base {
    static get defaultFill(): string;
    static get defaultStroke(): string;
    static get defaultLineWidth(): number;
    static get defaultCircleSize(): number;
    static editForm: typeof editForm;
    static schema(...extend: any[]): any;
    static get builderInfo(): {
        title: string;
        group: string;
        icon: string;
        weight: number;
        documentation: string;
        schema: any;
    };
    static get simpleConditionSettings(): any;
    private _viewBoxFromSubmission;
    state: IDrawingState;
    modes: {
        [key: string]: IDrawingMode;
    };
    dimensionsMultiplier: number;
    dimensionsCorrection: number;
    zoomInfo: {
        viewBox: {
            current?: IViewBox;
            default?: IViewBox;
        };
        canvasViewBox: {
            current?: IViewBox;
            default?: IViewBox;
        };
        totalMultiplier: number;
        multiplier: number;
    };
    layers: SVGSVGElement[];
    deleted: any;
    two: any;
    dimensions: IViewBox;
    canvasSvg: any;
    backgroundReady: any;
    constructor(...args: any[]);
    render(): any;
    loadComponentRefs(element: any): void;
    init(): any;
    attach(element: any): any;
    get buttonsRefs(): {};
    get renderContext(): {
        zoomInfo: {
            totalMultiplier: number;
        };
        buttonGroups: (({
            title: string;
            key: string;
            icon: string;
            input?: undefined;
        } | {
            title: string;
            key: string;
            icon: string;
            input: {
                type: string;
                class: string;
                attributes: {
                    min: number;
                };
            };
        })[] | ({
            title: string;
            key: string;
            icon: string;
            input?: undefined;
        } | {
            title: string;
            key: string;
            icon: string;
            input: {
                type: string;
                class: string;
                attributes: {
                    min: number;
                    max: number;
                };
            };
        })[] | {
            title: string;
            key: string;
            icon: string;
        }[])[];
        disabled: any;
    };
    get defaultSchema(): any;
    get templateName(): string;
    get emptyValue(): any[];
    get dataReady(): any;
    get attachFunctions(): {
        stroke: (element: any) => any;
        fill: (element: any) => any;
        width: () => void;
        circle: () => void;
    };
    get buttonGroups(): (({
        title: string;
        key: string;
        icon: string;
        input?: undefined;
    } | {
        title: string;
        key: string;
        icon: string;
        input: {
            type: string;
            class: string;
            attributes: {
                min: number;
            };
        };
    })[] | ({
        title: string;
        key: string;
        icon: string;
        input?: undefined;
    } | {
        title: string;
        key: string;
        icon: string;
        input: {
            type: string;
            class: string;
            attributes: {
                min: number;
                max: number;
            };
        };
    })[] | {
        title: string;
        key: string;
        icon: string;
    }[])[];
    get componentLabel(): string;
    set viewBoxFromSubmission(value: IViewBox);
    /**
     * ViewBox taken from the submission
     * Required to display the drawing from submission properly if the screen size has changed
     */
    get viewBoxFromSubmission(): IViewBox;
    loadBackgroundImage(backgrounImageElement: any): void;
    createDrawingArea(): void;
    getActualCoordinate(coordinate: any): any;
    onBackgroundReady(): void;
    addBackground(): void;
    parseSvg(svgMarkup: any): SVGSVGElement;
    prepareSvg(svg: any): void;
    setSvgImage(svgMarkup: any): void;
    assignZoomInfo(viewBox: any, type?: string): void;
    buttonAttributes(button: any): string;
    attachDrawEvents(): void;
    attachToolbar(): void;
    attachModesButtons(): void;
    attachStylesButtons(): void;
    attachActionsButtons(): void;
    callAttachFunction(element: any, key: any): void;
    setState(state: any): void;
    setActiveButton(mode: any): void;
    setBackgroundImage(image?: any): void;
    setRasterImage(): void;
    setCanvasViewBox(width: any, height: any, minX?: number, minY?: number): void;
    calculateCanvasViewBox(): {
        minX: number;
        minY: number;
        width: any;
        height: any;
    };
    onBackgroundImageWasSetted(): void;
    /**
     * Calculates the width and height that image should have to make the component fit the window's size
     */
    calculateAutoSize(): {
        width: number;
        height: number;
    };
    setOpenModalElement(): void;
    getPreviewImage(): string;
    getValueAsString(value: any, options: any): string;
    getEncodedDrawing(): string;
    getModalPreviewTemplate(): string;
    mapDimensionsFromAttributes(svg: any): number[];
    setDimensions(viewBoxMinX: any, viewBoxMinY: any, viewBoxWidth: any, viewBoxHeight: any): void;
    stretchDrawingArea(): void;
    setEditorSize(width: any, height: any): void;
    clear(): void;
    clearAll(): void;
    draw(value: any): void;
    appendDrawingToPreview(): Promise<void>;
    combineIntoSingleImage(background: any, drawing: any, imageType?: string): Promise<string>;
    undo(): void;
    redo(): void;
    setValue(value: any, flags: any): void;
    getSvg(): any;
    normalizeSvgOffset(type?: string): void;
    setViewBoxAttribute(element: any, viewBox: any): void;
    updateSvgViewBox(type?: string): void;
    drag(offset: any, type?: string): void;
    dragImage(offset: any): void;
    setTotalMultiplier(multiplier: any): void;
    zoomImage(coordinate: any, type?: string): void;
    zoom(coordinate: any, multiplier: any): void;
    zoomOut(type?: string): void;
    zoomIn(coordinate: any, type?: string): void;
    resetZoom(): void;
}
export {};
