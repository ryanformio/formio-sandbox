export default function (Two) {
    var _this = this;
    return {
        pencil: {
            state: {
                mode: 'pencil',
            },
            eventStart: function (coordinate) {
                _this.points = [coordinate];
                _this.prev = coordinate;
                _this.curve = _this.two.makeCurve([
                    new Two.Vector(_this.prev.x, _this.prev.y),
                    new Two.Vector(coordinate.x, coordinate.y + 1),
                ], true);
                _this.curve.noFill().stroke = _this.state.stroke;
                _this.curve.linewidth = _this.state.linewidth;
                _this.curve.vertices.forEach(function (v) { return v.addSelf(_this.curve.translation); });
                _this.curve.translation.clear();
                _this.two.update();
                _this.layers.push(_this.curve);
            },
            drag: function (coordinate) {
                _this.points.push(coordinate);
                _this.curve.vertices.push(new Two.Vector(coordinate.x, coordinate.y));
                _this.two.update();
                _this.prev = coordinate;
            },
            eventEnd: function () {
                var value = _this.dataValue.slice();
                value.push(Object.assign({}, _this.state, { points: _this.points }));
                _this.dataValue = value;
                _this.triggerChange();
            },
            draw: function (state) {
                var layer = _this.two.makeCurve(state.points.map(function (point) { return new Two.Vector(point.x, point.y); }), true);
                layer.noFill().stroke = state.stroke;
                layer.linewidth = state.linewidth;
                layer.vertices.forEach(function (v) { return v.addSelf(layer.translation); });
                layer.translation.clear();
                return layer;
            },
        },
        line: {
            state: {
                mode: 'line',
            },
            eventStart: function (coordinate) {
                _this.center = coordinate;
                _this.line = _this.two.makeLine(coordinate.x, coordinate.y, coordinate.x, coordinate.y);
                _this.line.fill = _this.state.fill;
                _this.line.stroke = _this.state.stroke;
                _this.line.linewidth = _this.state.linewidth;
                _this.two.update();
                _this.layers.push(_this.line);
                var index = _this.layers.length - 1;
            },
            drag: function (coordinate) {
                _this.line.vertices[1].x = coordinate.x;
                _this.line.vertices[1].y = coordinate.y;
                _this.two.update();
            },
            eventEnd: function () {
                var value = _this.dataValue.slice();
                var vertices = _this.line.vertices.map(function (vertice) {
                    return {
                        x: vertice.x,
                        y: vertice.y,
                    };
                });
                value.push(Object.assign({}, _this.state, { vertices: vertices }));
                _this.dataValue = value;
                _this.triggerChange();
            },
            draw: function (state) {
                var layer = _this.two.makeLine(state.vertices[0].x, state.vertices[0].y, state.vertices[1].x, state.vertices[1].y);
                layer.fill = state.fill;
                layer.stroke = state.stroke;
                layer.linewidth = state.linewidth;
                return layer;
            },
        },
        circle: {
            state: {
                mode: 'circle',
            },
            eventStart: function (coordinate) {
                _this.center = coordinate;
                var layer = _this.two.makeCircle(coordinate.x, coordinate.y, _this.state.circleSize);
                layer.fill = _this.state.fill;
                layer.stroke = _this.state.stroke;
                layer.linewidth = _this.state.linewidth;
                _this.two.update();
                _this.layers.push(layer);
            },
            /* tslint:disable */
            drag: function () { },
            /* tslint:enable */
            eventEnd: function () {
                var value = _this.dataValue.slice();
                value.push(Object.assign({}, _this.state, { center: _this.center }));
                _this.dataValue = value;
                _this.triggerChange();
            },
            draw: function (state) {
                var layer = _this.two.makeCircle(state.center.x, state.center.y, state.circleSize);
                layer.fill = state.fill;
                layer.stroke = state.stroke;
                layer.linewidth = state.linewidth;
                return layer;
            },
        },
        rectangle: {
            cursor: {
                hover: 'crosshair',
            },
            state: {
                mode: 'rectangle',
            },
            eventStart: function (coordinate) {
                _this.dragStartPoint = coordinate;
            },
            drag: function (coordinate) {
                _this.dragEndPoint = coordinate;
                if (_this.rectangle) {
                    _this.rectangle.remove();
                }
                _this.width = Math.abs(_this.dragEndPoint.x - _this.dragStartPoint.x);
                _this.height = Math.abs(_this.dragEndPoint.y - _this.dragStartPoint.y);
                _this.center = {
                    x: Math.min(_this.dragStartPoint.x, _this.dragEndPoint.x) + _this.width / 2,
                    y: Math.min(_this.dragStartPoint.y, _this.dragEndPoint.y) + _this.height / 2,
                };
                _this.rectangle = _this.two.makeRectangle(_this.center.x, _this.center.y, _this.width, _this.height);
                _this.rectangle.fill = _this.state.fill;
                _this.rectangle.stroke = _this.state.stroke;
                _this.rectangle.linewidth = _this.state.linewidth;
                _this.two.update();
                _this.layers.push(_this.rectangle);
            },
            eventEnd: function () {
                var value = _this.dataValue.slice();
                delete _this.rectangle;
                var rectangleState = {
                    center: _this.center,
                    width: _this.width,
                    height: _this.height,
                };
                value.push(Object.assign({}, _this.state, rectangleState));
                _this.dataValue = value;
                _this.triggerChange();
            },
            draw: function (state) {
                var layer = _this.two.makeRectangle(state.center.x, state.center.y, state.width, state.height);
                layer.fill = state.fill;
                layer.stroke = state.stroke;
                layer.linewidth = state.linewidth;
                return layer;
            },
        },
        zoomIn: {
            cursor: {
                hover: 'zoom-in',
            },
            state: {
                mode: 'zoomIn',
            },
            eventStart: function (coordinate) { return _this.zoom(coordinate, _this.zoomInfo.multiplier); },
        },
        zoomOut: {
            cursor: {
                hover: 'zoom-out',
            },
            state: {
                mode: 'zoomOut',
            },
            eventStart: function (coordinate) { return _this.zoom(coordinate, 1 / _this.zoomInfo.multiplier); },
        },
        dragImage: {
            cursor: {
                hover: 'grab',
                clicked: 'grabbing',
            },
            state: {
                mode: 'dragImage',
            },
            eventStart: function (coordinate) { return _this.dragStartPoint = coordinate; },
            drag: function (coordinate) {
                if (!_this.dragLastPoint) {
                    _this.dragLastPoint = _this.dragStartPoint;
                }
                var offset = {
                    x: Math.round(coordinate.x - _this.dragStartPoint.x),
                    y: Math.round(coordinate.y - _this.dragStartPoint.y),
                };
                if (offset.x !== 0 || offset.y !== 0) {
                    _this.dragImage(offset);
                    _this.dragLastPoint = coordinate;
                }
            },
        },
    };
}
