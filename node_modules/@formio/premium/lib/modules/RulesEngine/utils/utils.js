var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Utils } from 'formiojs';
var originalCheckTrigger = Utils.checkTrigger;
Utils.checkTrigger = function checkTrigger(component, trigger, row, data, form, instance) {
    if (!trigger[trigger.type]) {
        return false;
    }
    if (trigger.type === 'condition') {
        return instance.calculateCondition(trigger.condition);
    }
    return originalCheckTrigger(component, trigger, row, data, form, instance);
};
var originalCheckCondition = Utils.checkCondition;
Utils.checkCondition = function checkCondition(component, row, data, form, instance) {
    var rest = [];
    for (var _i = 5; _i < arguments.length; _i++) {
        rest[_i - 5] = arguments[_i];
    }
    var conditional = component.conditional;
    if (conditional && conditional.condition && instance.calculateCondition) {
        return instance.calculateCondition(component.conditional.condition);
    }
    return originalCheckCondition.apply(void 0, __spreadArrays([component, row, data, form, instance], rest));
};
function getSuperPrototypeWithProperty(prototype, property) {
    while (!Object.prototype.hasOwnProperty.call(prototype, property)) {
        prototype = Object.getPrototypeOf(prototype);
        if (prototype === null) {
            throw new Error("Property '" + property + "' not found.");
        }
    }
    return prototype;
}
export function getAllContextComponents(context) {
    var values = [];
    context.utils.eachComponent(context.instance.options.editForm.components, function (component, path) {
        if (component.key !== context.data.key) {
            values.push({
                label: (component.label || component.key) + " (" + path + ")",
                value: path,
            });
        }
    }, true);
    return values;
}
function getSuperPropertyDescriptor(superClass, property) {
    return Object.getOwnPropertyDescriptor(getSuperPrototypeWithProperty(superClass.prototype, property), property);
}
export function superGet(superClass, property) {
    return getSuperPropertyDescriptor(superClass, property).get;
}
export function superSet(superClass, property) {
    return getSuperPropertyDescriptor(superClass, property).set;
}
export default Utils;
