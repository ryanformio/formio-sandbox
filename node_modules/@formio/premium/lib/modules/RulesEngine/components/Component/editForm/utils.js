var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import _ from 'lodash';
import { Utils, Formio } from 'formiojs';
import QuickRulesHelper from '../../../validators/QuickRulesHelper';
import BaseData from 'formiojs/components/_classes/component/editForm/Component.edit.data';
import BaseConditional from 'formiojs/components/_classes/component/editForm/Component.edit.conditional';
import BaseValidation from 'formiojs/components/_classes/component/editForm/Component.edit.validation';
var EditFormUtils = {
    sortAndFilterComponents: function (components) {
        return _.filter(_.sortBy(components, 'weight'), function (item) { return !item.ignore; });
    },
    unifyComponents: function (objValue, srcValue) {
        if (objValue.key && srcValue.key) {
            if (objValue.skipMerge || srcValue.skipMerge) {
                return false;
            }
            if (objValue.key === srcValue.key) {
                // Create complete objects by including missing keys.
                _.each(objValue, function (value, prop) {
                    if (objValue.overrideEditForm || !srcValue.hasOwnProperty(prop)) {
                        srcValue[prop] = value;
                    }
                });
                _.each(srcValue, function (value, prop) {
                    if (srcValue.overrideEditForm || !objValue.hasOwnProperty(prop)) {
                        objValue[prop] = value;
                    }
                });
                if (objValue.components) {
                    srcValue.components = EditFormUtils.sortAndFilterComponents(_.unionWith(objValue.components, srcValue.components, EditFormUtils.unifyComponents));
                }
                if (objValue.sidebar) {
                    srcValue.sidebar = EditFormUtils.sortAndFilterComponents(_.unionWith(objValue.sidebar, srcValue.sidebar, EditFormUtils.unifyComponents));
                }
                return true;
            }
            else {
                return false;
            }
        }
        return _.isEqual(objValue, srcValue);
    },
    redefineComponentPrecreatedTemplates: function (quickRules) {
        if (quickRules === void 0) { quickRules = []; }
        return {
            key: 'advancedValidationPanel',
            components: [
                {
                    key: 'validations',
                    components: [
                        {
                            key: 'container-ui',
                            components: [
                                {
                                    key: 'precreatedTemplatesWrapper',
                                    overrideEditForm: true,
                                    components: EditFormUtils.getComponentPrecreatedTemplates(quickRules)
                                },
                            ],
                        },
                    ],
                },
            ],
        };
    },
    filterAndTransformSettings: function (items) {
        var filteredAndTransformedItems = items;
        if (Array.isArray(items)) {
            var transformedSettings_1 = [
                {
                    baseTab: 'validation',
                    rulesTab: 'validation',
                    ignore: false,
                    components: null
                },
                {
                    baseTab: 'logic',
                    rulesTab: 'logic',
                    ignore: false,
                    components: null
                },
                {
                    baseTab: 'conditional',
                    rulesTab: 'conditionalVisibility',
                    ignore: false,
                },
                {
                    baseTab: 'data',
                    rulesTab: 'calculations',
                    takenPartly: true,
                    ignore: false,
                },
            ];
            filteredAndTransformedItems = items.filter(function (item) {
                var transformedSetting = transformedSettings_1.find(function (setting) {
                    return setting.baseTab === item.key;
                });
                if (transformedSetting) {
                    transformedSetting.ignore = item.ignore;
                    if (transformedSetting.hasOwnProperty('components')) {
                        transformedSetting.components = item.components;
                    }
                }
                return !transformedSetting || transformedSetting.takenPartly;
            });
            var transformedRules = _(transformedSettings_1).chain()
                .map(function (setting) {
                if (setting.ignore) {
                    return {
                        key: setting.rulesTab,
                        ignore: true
                    };
                }
                var isValidationTab = setting.baseTab === 'validation';
                if (_.isArray(setting.components) && isValidationTab) {
                    return {
                        key: setting.rulesTab,
                        components: [{
                                key: 'simpleValidationPanel',
                                components: setting.components
                            }]
                    };
                }
                if (_.isArray(setting.components) && !isValidationTab) {
                    return {
                        key: setting.rulesTab,
                        components: setting.components
                    };
                }
                return;
            }).compact().value();
            if (transformedRules.length) {
                filteredAndTransformedItems.push({
                    key: 'rules',
                    components: [{
                            key: 'rulesTabs',
                            components: transformedRules
                        }]
                });
            }
        }
        return filteredAndTransformedItems;
    },
    logicVariablesTable: function (additional) {
        additional = additional || '';
        return {
            type: 'htmlelement',
            tag: 'div',
            /* eslint-disable prefer-template */
            content: '<p>The following variables are available in all scripts.</p>' +
                '<table class="table table-bordered table-condensed table-striped">' +
                additional +
                '<tr><th>form</th><td>The complete form JSON object</td></tr>' +
                '<tr><th>submission</th><td>The complete submission object.</td></tr>' +
                '<tr><th>data</th><td>The complete submission data object.</td></tr>' +
                '<tr><th>row</th><td>Contextual "row" data, used within DataGrid, EditGrid, and Container components</td></tr>' +
                '<tr><th>component</th><td>The current component JSON</td></tr>' +
                '<tr><th>instance</th><td>The current component instance.</td></tr>' +
                '<tr><th>value</th><td>The current value of the component.</td></tr>' +
                '<tr><th>dayjs</th><td>The day.js library for date manipulation.</td></tr>' +
                '<tr><th>_</th><td>An instance of <a href="https://lodash.com/docs/" target="_blank" rel="noopener noreferrer">Lodash</a>.</td></tr>' +
                '<tr><th>utils</th><td>An instance of the <a href="http://formio.github.io/formio.js/docs/identifiers.html#utils" target="_blank" rel="noopener noreferrer">FormioUtils</a> object.</td></tr>' +
                '<tr><th>util</th><td>An alias for "utils".</td></tr>' +
                '</table><br/>',
        };
    },
    logicSectionHandler: {
        js: function (_a) {
            var commonName = _a.commonName, property = _a.property, example = _a.example;
            return {
                type: 'panel',
                title: 'JavaScript',
                collapsible: true,
                collapsed: false,
                style: { 'margin-bottom': '10px' },
                key: commonName + "-js",
                customConditional: function () {
                    return !Utils.Evaluator.noeval;
                },
                components: [
                    {
                        type: 'textarea',
                        key: property,
                        rows: 5,
                        editor: 'ace',
                        hideLabel: true,
                        input: true,
                    },
                    {
                        type: 'htmlelement',
                        tag: 'div',
                        content: "<p>Enter custom javascript code.</p>" + example,
                    },
                ],
            };
        },
        json: function (_a) {
            var commonName = _a.commonName, property = _a.property, example = _a.example;
            return {
                type: 'panel',
                title: 'JSONLogic',
                collapsible: true,
                collapsed: true,
                key: commonName + "-json",
                components: [
                    {
                        type: 'htmlelement',
                        tag: 'div',
                        /* eslint-disable prefer-template */
                        content: '<p>Execute custom logic using <a href="http://jsonlogic.com/" target="_blank" rel="noopener noreferrer">JSONLogic</a>.</p>' +
                            '<p>Full <a href="https://lodash.com/docs" target="_blank" rel="noopener noreferrer">Lodash</a> support is provided using an "_" before each operation, such as <code>{"_sum": {var: "data.a"}}</code></p>' +
                            example,
                    },
                    {
                        type: 'textarea',
                        key: property,
                        rows: 5,
                        editor: 'ace',
                        hideLabel: true,
                        as: 'json',
                        input: true,
                    },
                ],
            };
        },
        variable: function (_a) {
            var commonName = _a.commonName, property = _a.property;
            return {
                type: 'panel',
                title: 'Variable',
                collapsible: true,
                collapsed: true,
                key: commonName + "-variable",
                components: [
                    __assign(__assign({}, EditFormUtils.variableSelector()), { key: property }),
                ],
            };
        },
        condition: function (_a) {
            var commonName = _a.commonName, property = _a.property;
            return {
                type: 'panel',
                title: 'Condition',
                collapsible: true,
                collapsed: true,
                key: commonName + "-condition",
                components: [
                    __assign(__assign({}, EditFormUtils.conditionSelector()), { key: property }),
                ],
            };
        },
    },
    javaScriptValue: function (title, property, weight, logicSections, additionalParams) {
        var _this = this;
        if (additionalParams === void 0) { additionalParams = null; }
        return {
            type: 'panel',
            title: title,
            theme: 'default',
            collapsible: true,
            collapsed: true,
            key: property + "Panel",
            weight: weight,
            components: __spreadArrays([
                this.logicVariablesTable(additionalParams)
            ], logicSections.map(function (logicSection) { return _this.logicSectionHandler[logicSection.type](__assign({ commonName: property }, logicSection)); })),
        };
    },
    valueDeclaration: function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.customConditions, customConditions = _c === void 0 ? null : _c, _d = _b.customVariables, customVariables = _d === void 0 ? null : _d, _e = _b.excludeConditions, excludeConditions = _e === void 0 ? [] : _e, _f = _b.excludeValueSources, excludeValueSources = _f === void 0 ? [] : _f, _g = _b.excludeVariables, excludeVariables = _g === void 0 ? [] : _g, _h = _b.required, required = _h === void 0 ? true : _h, _j = _b.valueSourceExtension, valueSourceExtension = _j === void 0 ? {} : _j;
        if (!Formio.rulesEntities) {
            return [];
        }
        var valueSources = _
            .chain(Formio.rulesEntities.ValueSources.getValueSources())
            .values()
            .reject(function (_a) {
            var name = _a.itemName;
            return excludeValueSources.includes(name);
        })
            .sortBy('weight')
            .value();
        return __spreadArrays([
            __assign({ label: 'Value Source', data: {
                    values: valueSources.map(function (valueSource) { return ({
                        label: valueSource.title,
                        value: valueSource.itemName,
                    }); }),
                }, validate: {
                    required: required,
                }, key: 'valueSource', type: 'select', input: true }, valueSourceExtension)
        ], valueSources
            .map(function (valueSource) {
            var editForm = valueSource.getInputEditForm({
                customConditions: customConditions,
                customVariables: customVariables,
                editFormUtils: EditFormUtils,
                excludeConditions: excludeConditions,
                excludeValueSources: excludeValueSources,
                excludeVariables: excludeVariables,
            });
            return editForm
                ? __assign(__assign({}, editForm), { key: valueSource.itemName + "Input", conditional: {
                        json: {
                            '===': [
                                {
                                    'var': 'row.valueSource',
                                },
                                valueSource.itemName,
                            ],
                        },
                    } }) : null;
        })
            .filter(_.identity));
    },
    variableSelector: function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.customValues, customValues = _c === void 0 ? null : _c, _d = _b.exclude, exclude = _d === void 0 ? [] : _d;
        return {
            type: 'select',
            input: true,
            key: 'variable',
            label: 'Variable:',
            dataSrc: 'custom',
            groupProperty: 'group',
            dataType: 'string',
            data: {
                custom: function (args) {
                    var data = args.data, options = args.options;
                    var _a = options.editComponentParentInstance, editComponentParentInstance = _a === void 0 ? null : _a;
                    var getDefaultVariables = function () {
                        var _a, _b;
                        var result = ((_a = data.variables) !== null && _a !== void 0 ? _a : []).map(function (variable) { return (__assign(__assign({}, variable), { group: 'This Component' })); });
                        var current = editComponentParentInstance;
                        while (current) {
                            var variables = ((_b = current.variables) !== null && _b !== void 0 ? _b : []).map(function (variable) { return (__assign(__assign({}, variable), { group: current.parent ? current.label : 'Webform' })); });
                            result = result.concat(variables);
                            current = current.parent;
                        }
                        return result;
                    };
                    var values = customValues ? customValues(args) : getDefaultVariables();
                    return _
                        .chain(values)
                        .map(function (_a) {
                        var name = _a.name, key = _a.key, group = _a.group;
                        return ({
                            name: name,
                            key: key,
                            group: group,
                        });
                    })
                        .reject(function (_a) {
                        var key = _a.key;
                        return exclude.some(function (excludeVariable) { return (_.isFunction(excludeVariable)
                            ? excludeVariable(key, args)
                            : (key !== excludeVariable)); });
                    })
                        .value();
                },
            },
            valueProperty: 'key',
            template: '<span>{{ item.name || item.key }} ({{ item.key }})</span>',
        };
    },
    conditionSelector: function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.customValues, customValues = _c === void 0 ? null : _c, _d = _b.exclude, exclude = _d === void 0 ? [] : _d, _e = _b.conditionSelectorExtension, conditionSelectorExtension = _e === void 0 ? {} : _e;
        return __assign({ type: 'select', input: true, key: 'condition', label: 'Condition', dataSrc: 'custom', groupProperty: 'group', dataType: 'string', data: {
                custom: function (args) {
                    var data = args.data, options = args.options;
                    var _a = options.editComponentParentInstance, editComponentParentInstance = _a === void 0 ? null : _a;
                    var getDefaultConditions = function () {
                        var _a, _b;
                        var result = ((_a = data.conditions) !== null && _a !== void 0 ? _a : []).map(function (condition) { return (__assign(__assign({}, condition), { group: 'This Component' })); });
                        var current = editComponentParentInstance;
                        while (current) {
                            var conditions = ((_b = current.conditions) !== null && _b !== void 0 ? _b : []).map(function (condition) { return (__assign(__assign({}, condition), { group: current.parent ? current.label : 'Webform' })); });
                            result = result.concat(conditions);
                            current = current.parent;
                        }
                        return result;
                    };
                    var values = customValues ? customValues(args) : getDefaultConditions();
                    return _
                        .chain(values)
                        .map(function (_a) {
                        var name = _a.name, key = _a.key, group = _a.group;
                        return ({
                            name: name,
                            key: key,
                            group: group,
                        });
                    })
                        .reject(function (_a) {
                        var key = _a.key;
                        return exclude.some(function (excludeCondition) { return (_.isFunction(excludeCondition)
                            ? excludeCondition(key, args)
                            : (key !== excludeCondition)); });
                    })
                        .value();
                },
            }, valueProperty: 'key', template: '<span>{{ item.name || item.key }} ({{ item.key }})</span>' }, conditionSelectorExtension);
    },
    getTransformer: function (_a, _b) {
        var title = _a.title, name = _a.itemName, itemArguments = _a.itemArguments, _c = _a.presetArguments, presetArguments = _c === void 0 ? {} : _c, optionsEditForm = _a.optionsEditForm;
        var _d = _b === void 0 ? {} : _b, _e = _d.customConditions, customConditions = _e === void 0 ? null : _e, _f = _d.customVariables, customVariables = _f === void 0 ? null : _f, _g = _d.excludeValueSources, excludeValueSources = _g === void 0 ? [] : _g, _h = _d.excludeVariables, excludeVariables = _h === void 0 ? [] : _h, _j = _d.valueSourceExtension, valueSourceExtension = _j === void 0 ? {} : _j;
        var conditional = {
            json: {
                '===': [
                    {
                        var: 'row.name',
                    },
                    name,
                ],
            },
        };
        var presetArgumentKeys = Object.keys(presetArguments);
        return ((itemArguments && itemArguments.length)
            ? ([
                {
                    label: title + " Transform Arguments",
                    key: name + "Arguments",
                    type: 'container',
                    input: true,
                    lazyLoad: true,
                    components: itemArguments
                        .filter(function (_a) {
                        var key = _a.key;
                        return !presetArgumentKeys.includes(key);
                    })
                        .map(function (argumentDescription) { return EditFormUtils.getArgument(argumentDescription, {
                        customConditions: customConditions,
                        customVariables: customVariables,
                        excludeValueSources: excludeValueSources,
                        excludeVariables: __spreadArrays([
                            function (key, _a) {
                                var _b, _c, _d, _e;
                                var instance = _a.instance;
                                return (key === ((_e = (_d = (_c = (_b = instance === null || instance === void 0 ? void 0 : instance.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.key));
                            },
                            function (key, _a) {
                                var _b, _c, _d, _e, _f;
                                var instance = _a.instance;
                                return (key === ((_f = (_e = (_d = (_c = (_b = instance === null || instance === void 0 ? void 0 : instance.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.parent) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.key));
                            },
                            function (key, _a) {
                                var _b, _c, _d, _e, _f, _g;
                                var instance = _a.instance;
                                return (key === ((_g = (_f = (_e = (_d = (_c = (_b = instance === null || instance === void 0 ? void 0 : instance.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.parent) === null || _e === void 0 ? void 0 : _e.parent) === null || _f === void 0 ? void 0 : _f.data) === null || _g === void 0 ? void 0 : _g.key));
                            }
                        ], excludeVariables),
                        valueSourceExtension: valueSourceExtension
                    }); }),
                    conditional: conditional,
                },
            ])
            : [])
            .concat((optionsEditForm && optionsEditForm.length)
            ? ({
                label: 'Options',
                key: name + "Options",
                type: 'container',
                input: true,
                lazyLoad: true,
                components: [
                    {
                        key: name + "OptionsPanel",
                        type: 'panel',
                        title: 'Options',
                        input: false,
                        collapsible: true,
                        collapsed: true,
                        components: optionsEditForm,
                    },
                ],
                conditional: conditional,
            })
            : []);
    },
    getOperator: function (_a, _b) {
        var _this = this;
        var title = _a.title, name = _a.itemName, itemArguments = _a.itemArguments, _c = _a.presetArguments, presetArguments = _c === void 0 ? {} : _c, optionsEditForm = _a.optionsEditForm;
        var _d = _b === void 0 ? {} : _b, _e = _d.customConditions, customConditions = _e === void 0 ? null : _e, _f = _d.customVariables, customVariables = _f === void 0 ? null : _f, _g = _d.excludeConditions, excludeConditions = _g === void 0 ? [] : _g, _h = _d.excludeValueSources, excludeValueSources = _h === void 0 ? [] : _h, _j = _d.valueSourceExtension, valueSourceExtension = _j === void 0 ? {} : _j;
        var conditional = {
            json: {
                '===': [
                    {
                        var: 'row.name',
                    },
                    name,
                ],
            },
        };
        var presetArgumentKeys = Object.keys(presetArguments);
        return ([
            {
                label: title,
                key: name + "Arguments",
                type: 'container',
                input: true,
                lazyLoad: true,
                components: itemArguments
                    .filter(function (_a) {
                    var key = _a.key;
                    return !presetArgumentKeys.includes(key);
                })
                    .map(function (argumentDescription) { return ({
                    type: 'panel',
                    title: argumentDescription.name || 'Value',
                    collapsible: true,
                    collapsed: true,
                    tooltip: argumentDescription.tooltip || '',
                    components: [EditFormUtils.getArgument(argumentDescription, {
                            customConditions: customConditions,
                            customVariables: customVariables,
                            excludeConditions: __spreadArrays([
                                function (key, _a) {
                                    var instance = _a.instance;
                                    return (key === instance.parent.parent.parent.parent.parent.data.key);
                                },
                                function (key, _a) {
                                    var instance = _a.instance;
                                    return (key === instance.parent.parent.parent.parent.parent.parent.data.key);
                                }
                            ], excludeConditions),
                            excludeValueSources: excludeValueSources,
                            valueSourceExtension: __assign({ placeholder: argumentDescription.placeholder || _this.valueSourcePlaceholder }, valueSourceExtension),
                            hideLabel: true
                        })]
                }); }),
                conditional: conditional,
            },
        ]).concat((optionsEditForm && optionsEditForm.length)
            ? ({
                label: 'Options',
                key: name + "Options",
                type: 'container',
                input: true,
                lazyLoad: true,
                components: [
                    {
                        key: name + "OptionsPanel",
                        type: 'panel',
                        title: 'Options',
                        input: false,
                        collapsible: true,
                        collapsed: true,
                        components: optionsEditForm,
                    },
                ],
                conditional: conditional,
            })
            : []);
    },
    getArgument: function (_a, _b) {
        var name = _a.name, key = _a.key, _c = _a.required, required = _c === void 0 ? false : _c, _d = _a.extendedContainerParameters, extendedContainerParameters = _d === void 0 ? {} : _d;
        var _e = _b === void 0 ? {} : _b, _f = _e.customConditions, customConditions = _f === void 0 ? null : _f, _g = _e.customVariables, customVariables = _g === void 0 ? null : _g, _h = _e.excludeConditions, excludeConditions = _h === void 0 ? [] : _h, _j = _e.excludeValueSources, excludeValueSources = _j === void 0 ? [] : _j, _k = _e.excludeVariables, excludeVariables = _k === void 0 ? [] : _k, _l = _e.valueSourceExtension, valueSourceExtension = _l === void 0 ? {} : _l, _m = _e.hideLabel, hideLabel = _m === void 0 ? false : _m;
        return __assign({ label: name, hideLabel: hideLabel,
            key: key, type: 'container', input: true, components: EditFormUtils.valueDeclaration({
                customConditions: customConditions,
                customVariables: customVariables,
                excludeConditions: excludeConditions,
                excludeValueSources: __spreadArrays([
                    'conditionalAssignment'
                ], excludeValueSources),
                excludeVariables: excludeVariables,
                required: required,
                valueSourceExtension: valueSourceExtension
            }) }, extendedContainerParameters);
    },
    defaultPrecreatedTemplates: ['required', 'minLength', 'maxLength', 'minWords', 'maxWords', 'pattern'],
    getComponentPrecreatedTemplates: function (rulesList) {
        if (rulesList === void 0) { rulesList = []; }
        var quickRules = Formio.rulesEntities
            ? rulesList.map(function (rule) { return Formio.rulesEntities.QuickRules.getQuickRule(rule); })
            : [];
        return this.addQuickRules(quickRules);
    },
    addQuickRules: function (QuickRules) {
        if (QuickRules === void 0) { QuickRules = []; }
        var templateSelectorKey = 'precreatedTemplateSelect';
        return __spreadArrays([
            {
                label: 'Precreated Validation Template:',
                widget: 'choicesjs',
                tooltip: 'add validation template and adopt it to your needs',
                data: {
                    values: __spreadArrays(QuickRules.map(function (rule) { return ({
                        label: rule.title,
                        value: rule.itemName,
                    }); })),
                },
                key: templateSelectorKey,
                type: 'select',
                input: true,
            }
        ], QuickRules.map(function (rule) {
            var name = rule.itemName;
            var editForm = rule.getEditForm() || [];
            return {
                label: 'Add Template Wrapper',
                key: name + "AddTemplateWrapper",
                type: 'container',
                conditional: { show: true, when: templateSelectorKey, eq: name },
                components: editForm.concat({
                    type: 'button',
                    key: name + "Apply",
                    label: 'Apply',
                    input: true,
                    size: 'sm',
                    action: 'custom',
                    custom: function (_a) {
                        var instance = _a.instance;
                        var helper = new QuickRulesHelper(instance.root, {});
                        helper.rowIndex(instance.rowIndex);
                        var quickRuleInstance = new rule({});
                        var inputContainer = instance.parent;
                        var input = inputContainer.dataValue;
                        quickRuleInstance.addRule(helper, input);
                        if (inputContainer) {
                            inputContainer.parent.setPristine(true);
                            inputContainer.parent.resetValue();
                        }
                    },
                }),
            };
        }));
    },
    valueSourcePlaceholder: 'Select Value Source',
    getVariablesEditForm: function (_a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, _c = _b.customConditions, customConditions = _c === void 0 ? null : _c, _d = _b.customVariables, customVariables = _d === void 0 ? null : _d, _e = _b.excludeValueSources, excludeValueSources = _e === void 0 ? [] : _e, _f = _b.editGridAdditionalSettings, editGridAdditionalSettings = _f === void 0 ? {} : _f, _g = _b.hideHeader, hideHeader = _g === void 0 ? false : _g;
        if (!Formio.rulesEntities) {
            return {};
        }
        return __assign({ label: 'Variables', key: 'variables', input: true, type: 'editgrid', inlineEdit: true, hideLabel: true, templates: {
                header: hideHeader
                    ? ''
                    : ("<div class=\"row\">\n              <div class=\"col-sm-10\">Name</div>\n              <div class=\"col-sm-2\">Actions</div>\n            </div>"),
                row: ("<div class=\"row\">\n            <div class=\"col-sm-10\">{{ row.name ? row.name + \" (\" + row.key + \")\" : row.key }}</div>\n            <div class=\"col-sm-2\">\n              <button class=\"btn btn-default btn-light btn-sm editRow\">Edit</button>\n              <button class=\"btn btn-danger btn-sm removeRow\">Delete</button>\n            </div>\n          </div>"),
            }, addAnother: 'Add Variable', saveRow: 'Save Variable', lazyLoad: true, components: __spreadArrays([
                {
                    type: 'textfield',
                    input: true,
                    key: 'name',
                    label: 'Name',
                    validate: {
                        required: true,
                    },
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'key',
                    label: 'Key',
                    allowCalculateOverride: true,
                    calculateValue: {
                        _camelCase: [
                            {
                                var: 'row.name',
                            },
                        ],
                    },
                    validate: {
                        required: true,
                        custom: function (_a) {
                            var input = _a.input, instance = _a.instance;
                            var variables = instance.root.getComponent('variables');
                            var isUnique = !variables.dataValue.some(function (variable) {
                                if (variable === instance.parent.editHelper || variable === instance.data) {
                                    return false;
                                }
                                return variable.key === input;
                            });
                            return isUnique || 'Variable with the same key already exists within this component.';
                        },
                    },
                }
            ], EditFormUtils.valueDeclaration({
                customConditions: customConditions,
                customVariables: customVariables,
                excludeVariables: [
                    function (key, _a) {
                        var row = _a.row;
                        return (key === row.key);
                    },
                    function (key, _a) {
                        var _b, _c;
                        var instance = _a.instance;
                        return (key === ((_c = (_b = instance === null || instance === void 0 ? void 0 : instance.parent) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.key));
                    },
                    function (key, _a) {
                        var _b, _c, _d;
                        var instance = _a.instance;
                        return (key === ((_d = (_c = (_b = instance === null || instance === void 0 ? void 0 : instance.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.key));
                    },
                    function (key, _a) {
                        var _b, _c, _d, _e;
                        var instance = _a.instance;
                        return (key === ((_e = (_d = (_c = (_b = instance === null || instance === void 0 ? void 0 : instance.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.parent) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.key));
                    },
                ],
                excludeValueSources: excludeValueSources,
                valueSourceExtension: {
                    label: 'Variable value equals to:',
                    placeholder: this.valueSourcePlaceholder
                }
            }), [
                {
                    label: 'Transform',
                    key: 'transform',
                    input: true,
                    type: 'container',
                    lazyLoad: true,
                    components: __spreadArrays([
                        {
                            label: 'transformed as follows:',
                            tooltip: 'Select how to transform variable value',
                            dataSrc: 'values',
                            defaultValue: 'identity',
                            data: {
                                values: _.map(Formio.rulesEntities.Transformers.getTransformers(), function (transform) { return ({
                                    label: transform.title,
                                    value: transform.itemName,
                                }); }),
                            },
                            dataType: 'string',
                            validate: {
                                required: true,
                            },
                            key: 'name',
                            type: 'select',
                            input: true,
                        }
                    ], _.flatMap(Formio.rulesEntities.Transformers.getTransformers(), function (transformer) { return EditFormUtils.getTransformer(transformer, {
                        customConditions: customConditions,
                        customVariables: customVariables,
                        excludeValueSources: excludeValueSources,
                        valueSourceExtension: { hideLabel: true, placeholder: _this.valueSourcePlaceholder }
                    }); })),
                    conditional: {
                        json: {
                            and: [
                                {
                                    '!!': {
                                        var: 'row.valueSource',
                                    },
                                },
                                {
                                    '!==': [
                                        {
                                            var: 'row.valueSource',
                                        },
                                        'conditionalAssignment',
                                    ],
                                },
                            ],
                        },
                    },
                },
            ]) }, editGridAdditionalSettings);
    },
    getConditionsEditForm: function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.customConditions, customConditions = _c === void 0 ? null : _c, _d = _b.customVariables, customVariables = _d === void 0 ? null : _d, _e = _b.excludeValueSources, excludeValueSources = _e === void 0 ? [] : _e, _f = _b.editGridAdditionalSettings, editGridAdditionalSettings = _f === void 0 ? {} : _f, _g = _b.hideHeader, hideHeader = _g === void 0 ? false : _g;
        if (!Formio.rulesEntities) {
            return {};
        }
        return __assign({ type: 'editgrid', input: true, label: 'Conditions', key: 'conditions', hideLabel: true, inlineEdit: true, templates: {
                header: hideHeader
                    ? ''
                    : ("<div class=\"row\">\n              <div class=\"col-sm-10\">Name</div>\n              <div class=\"col-sm-2\">Actions</div>\n            </div>"),
                row: ("<div class=\"row\">\n            <div class=\"col-sm-10\">{{ row.name ? row.name + \" (\" + row.key + \")\" : row.key }}</div>\n            <div class=\"col-sm-2\">\n              <button class=\"btn btn-default btn-light btn-sm editRow\">Edit</button>\n              <button class=\"btn btn-danger btn-sm removeRow\">Delete</button>\n            </div>\n          </div>"),
            }, addAnother: 'Add Condition', saveRow: 'Save Condition', lazyLoad: true, components: [
                {
                    type: 'textfield',
                    input: true,
                    key: 'name',
                    label: 'Name',
                    validate: {
                        required: true,
                    },
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'key',
                    label: 'Key',
                    allowCalculateOverride: true,
                    calculateValue: {
                        _camelCase: [
                            {
                                var: 'row.name',
                            },
                        ],
                    },
                    validate: {
                        required: true,
                        custom: function (_a) {
                            var input = _a.input, instance = _a.instance;
                            var conditions = instance.root.getComponent('conditions');
                            var isUnique = !conditions.dataValue.some(function (condition) {
                                if (condition === instance.parent.editHelper || condition === instance.data) {
                                    return false;
                                }
                                return condition.key === input;
                            });
                            return isUnique || 'Condition with the same key already exists within this component.';
                        },
                    },
                },
                {
                    type: 'editgrid',
                    input: true,
                    key: 'parts',
                    label: 'Conditon parts:',
                    tooltip: 'Add parts of the condition that will be logically connected to each other by logical operator',
                    inlineEdit: true,
                    templates: {
                        header: ("<div class=\"row\">\n                <div class=\"col-sm-2\">Type</div>\n                <div class=\"col-sm-2\">Operator</div>\n                <div class=\"col-sm-6\">Description</div>\n                <div class=\"col-sm-2\">Actions</div>\n              </div>"),
                        row: ("<div class=\"row\">\n                <div class=\"col-sm-2\">{{ flattenedComponents.type.getView(row.type) }}</div>\n                <div class=\"col-sm-2\">{{ row.not ? 'Not' : flattenedComponents.conjunction.getView(row.conjunction) }}</div>\n                <div class=\"col-sm-6\">{{ (row.type === 'existing') ? flattenedComponents.condition.getView(row.condition) : (row.description || flattenedComponents.name.getView(row.operator.name)) }}</div>\n                <div class=\"col-sm-2\">\n                  <button class=\"btn btn-default btn-light btn-sm editRow\">Edit</button>\n                  <button class=\"btn btn-danger btn-sm removeRow\">Delete</button>\n                </div>\n              </div>"),
                    },
                    addAnother: 'Add Condition Part',
                    saveRow: 'Save Condition Part',
                    components: [
                        {
                            type: 'checkbox',
                            input: true,
                            key: 'not',
                            tooltip: 'Apply NOT operator for the condition part that takes true condition to false and vice versa',
                            label: 'Logical Negation',
                            defaultValue: false,
                            customConditional: function (_a) {
                                var instance = _a.instance;
                                return instance.rowIndex === 0;
                            }
                        },
                        {
                            type: 'radio',
                            input: true,
                            key: 'conjunction',
                            label: 'Previous condition part is logically connected with this condition part by the operator:',
                            defaultValue: 'and',
                            inline: true,
                            values: _
                                .chain(Formio.rulesEntities.Conjunctions.getConjunctions())
                                .sortBy('weight')
                                .filter(function (conjunction) { return conjunction.itemName !== 'not'; })
                                .map(function (conjunction) { return ({
                                label: conjunction.title,
                                value: conjunction.itemName,
                            }); })
                                .value(),
                            validate: {
                                required: true,
                            },
                            customConditional: function (_a) {
                                var instance = _a.instance;
                                return instance.rowIndex > 0;
                            }
                        },
                        {
                            type: 'radio',
                            input: true,
                            key: 'type',
                            label: 'Use:',
                            optionsLabelPosition: 'right',
                            inline: true,
                            values: [
                                {
                                    label: 'New Condition',
                                    value: 'new',
                                },
                                {
                                    label: 'Existing Condition',
                                    value: 'existing',
                                },
                            ],
                            validate: {
                                required: true,
                            },
                        },
                        __assign(__assign({}, EditFormUtils.conditionSelector({
                            customValues: customConditions,
                            exclude: [
                                function (key, _a) {
                                    var instance = _a.instance;
                                    return (key === instance.parent.data.key);
                                },
                            ],
                        })), { validate: {
                                required: true,
                            }, conditional: {
                                json: {
                                    '===': [
                                        {
                                            var: 'row.type',
                                        },
                                        'existing',
                                    ],
                                },
                            } }),
                        {
                            type: 'textfield',
                            input: true,
                            key: 'description',
                            label: 'Description',
                            conditional: {
                                json: {
                                    '===': [
                                        {
                                            var: 'row.type',
                                        },
                                        'new',
                                    ],
                                },
                            },
                        },
                        {
                            label: 'Conditon',
                            key: 'conditionOperatorWrapper',
                            type: 'custom',
                            input: false,
                            conditional: {
                                json: {
                                    '===': [
                                        {
                                            var: 'row.type',
                                        },
                                        'new',
                                    ],
                                },
                            },
                            components: [
                                {
                                    type: 'panel',
                                    title: 'If Value',
                                    collapsible: true,
                                    components: [
                                        EditFormUtils.getArgument({
                                            name: 'If Value:',
                                            key: 'value',
                                            required: true,
                                        }, {
                                            valueSourceExtension: { hideLabel: true, placeholder: this.valueSourcePlaceholder },
                                            hideLabel: true,
                                        }),
                                    ]
                                },
                                {
                                    type: 'container',
                                    input: true,
                                    label: 'Operator',
                                    key: 'operator',
                                    lazyLoad: true,
                                    components: __spreadArrays([
                                        {
                                            type: 'select',
                                            input: true,
                                            key: 'name',
                                            label: 'Operator',
                                            hideLabel: true,
                                            placeholder: 'Select Condition Operator',
                                            dataSrc: 'values',
                                            data: {
                                                values: _.map(Formio.rulesEntities.Operators.getOperators(), function (operator) { return ({
                                                    label: operator.title,
                                                    value: operator.itemName,
                                                }); }),
                                            },
                                            validate: {
                                                required: true,
                                            },
                                        }
                                    ], _.flatMap(Formio.rulesEntities.Operators.getOperators(), function (operator) { return EditFormUtils.getOperator(operator, {
                                        customConditions: customConditions,
                                        customVariables: customVariables,
                                        excludeValueSources: excludeValueSources,
                                        valueSourceExtension: { hideLabel: true }
                                    }); })),
                                },
                            ]
                        },
                    ],
                },
            ] }, editGridAdditionalSettings);
    },
    getWebformLogicEditFormSettings: function () {
        return {
            customConditions: function (_a) {
                var _b, _c;
                var data = _a.data;
                return ((_c = (_b = data.settings) === null || _b === void 0 ? void 0 : _b.conditions) !== null && _c !== void 0 ? _c : []).map(function (condition) { return (__assign(__assign({}, condition), { group: 'Webform' })); });
            },
            customVariables: function (_a) {
                var _b, _c;
                var data = _a.data;
                return ((_c = (_b = data.settings) === null || _b === void 0 ? void 0 : _b.variables) !== null && _c !== void 0 ? _c : []).map(function (variable) { return (__assign(__assign({}, variable), { group: 'Webform' })); });
            },
            excludeValueSources: [
                'thisComponent',
                'thisComponentRow',
                'thisComponentRowIndex',
                'thisComponentValue',
            ],
        };
    },
    getPanel: function (title, property, weight, tooltip, components) {
        return {
            type: 'panel',
            title: title,
            theme: 'default',
            collapsible: true,
            collapsed: true,
            tooltip: tooltip || '',
            key: property + "Panel",
            weight: weight,
            components: components,
        };
    },
    editModes: { ui: { name: 'UI', key: 'ui' }, js: { name: 'JS', key: 'js' }, json: { name: 'JSON', key: 'json' } },
    getModesComponents: function (label, property, weight, components) {
        if (components === void 0) { components = {}; }
        var selectorKey = property ? property + "Mode" : 'mode';
        var modeComponents = [{
                label: label,
                optionsLabelPosition: 'right',
                inline: true,
                values: [],
                key: selectorKey,
                type: 'radio',
                input: true,
                defaultValue: this.editModes.ui.key,
                weight: weight,
            }];
        _.each(components, function (comps, mode) {
            var modeSettings = EditFormUtils.editModes[mode];
            if (modeSettings) {
                modeComponents[0].values.push({
                    label: modeSettings.name,
                    value: modeSettings.key,
                });
                modeComponents.push({
                    label: 'Container',
                    hideLabel: true,
                    tableView: false,
                    key: (property ? property + "Container" : 'container') + "-" + modeSettings.key,
                    type: 'custom',
                    input: false,
                    components: _.isArray(comps) ? comps : [],
                    conditional: { show: true, when: selectorKey, eq: modeSettings.key },
                    weight: weight + 5,
                });
            }
        });
        return modeComponents;
    },
    advancedDefaultValueEditFormComponents: {
        ui: function () {
            return _.cloneDeep(EditFormUtils.getVariableComponents('Component default value equals to:', 'customDefaultValue', 0, { key: 'customDefaultValueVariable', validate: { required: true } }));
        },
        js: function () {
            return EditFormUtils.getModeComponentsFromBase(BaseData, 'customDefaultValue', 'js');
        },
        json: function () {
            return EditFormUtils.getModeComponentsFromBase(BaseData, 'customDefaultValue', 'json');
        },
    },
    calculatedValueEditFormComponents: {
        ui: function () {
            return _.cloneDeep(EditFormUtils.getVariableComponents('Component value equals to:', 'calculateValue', 0, { key: 'calculateValueVariable', validate: { required: true } }));
        },
        js: function () {
            return EditFormUtils.getModeComponentsFromBase(BaseData, 'calculateValue', 'js');
        },
        json: function () {
            return EditFormUtils.getModeComponentsFromBase(BaseData, 'calculateValue', 'json');
        },
    },
    advancedConditionEditFormComponents: {
        ui: function () {
            return EditFormUtils.getConditionComponents('Component is visible when the following condition is met:', 'advancedVisibility', 0, { key: 'conditional.condition', validate: { required: true } });
        },
        js: function () {
            return EditFormUtils.getModeComponentsFromBase(BaseConditional, 'customConditional', 'js');
        },
        json: function () {
            return EditFormUtils.getModeComponentsFromBase(BaseConditional, 'customConditional', 'json');
        },
    },
    advancedValidationEditFormComponents: {
        ui: function () {
            return [
                {
                    label: 'Precreated Templates Wrapper',
                    key: 'precreatedTemplatesWrapper',
                    type: 'container',
                    input: false,
                    components: EditFormUtils.getComponentPrecreatedTemplates(EditFormUtils.defaultPrecreatedTemplates),
                },
                {
                    label: 'Validation Container',
                    hideLabel: true,
                    tableView: false,
                    key: 'validationContainer',
                    type: 'custom',
                    input: false,
                    components: __spreadArrays([
                        {
                            type: 'checkbox',
                            label: 'Active',
                            key: 'active',
                            input: true,
                            defaultValue: true,
                        },
                        {
                            type: 'textfield',
                            label: 'Group',
                            key: 'group',
                            input: true,
                        },
                        {
                            type: 'textfield',
                            label: 'Description',
                            key: 'description',
                            input: true,
                        }
                    ], EditFormUtils.getConditionComponents('If component value does not comply with condition:', '', 0, {
                        key: 'condition',
                        validate: { required: true }
                    }, true, true), [
                        {
                            type: 'radio',
                            label: 'show:',
                            key: 'severity',
                            inline: true,
                            input: true,
                            values: [
                                {
                                    label: 'Error',
                                    value: 'error',
                                },
                                {
                                    label: 'Warning',
                                    value: 'warning',
                                },
                                {
                                    label: 'Info',
                                    value: 'info',
                                },
                            ],
                            validate: {
                                required: true,
                            },
                        },
                        {
                            type: 'textfield',
                            label: 'with the following content:',
                            key: 'message',
                            input: true,
                        },
                    ])
                }
            ];
        },
        js: function () {
            var basePanel = BaseValidation.find(function (setting) { return setting.key === 'custom-validation-js'; });
            return basePanel && _.isArray(basePanel.components) ? basePanel.components : [];
        },
        json: function () {
            var baseJsPanel = BaseValidation.find(function (setting) { return setting.key === 'custom-validation-js'; });
            var description = baseJsPanel && _.isArray(baseJsPanel.components) ? baseJsPanel.components[0] : {};
            var baseJsonPanel = BaseValidation.find(function (setting) { return setting.key === 'json-validation-json'; });
            return baseJsonPanel && _.isArray(baseJsonPanel.components) ? __spreadArrays([description], baseJsonPanel.components) : [];
        },
    },
    helpers: { condition: 'Condition', variable: 'Variable' },
    defineHelper: function (gridKey) {
        var helpers = _.cloneDeep(this.helpers);
        _.each(helpers, function (value, key) { return helpers[key] = value.toLowerCase(); });
        var lowerCasedGirdKey = gridKey.toLowerCase();
        var helperName = '';
        if (lowerCasedGirdKey.endsWith(helpers.condition + "grid")) {
            helperName = helpers.condition;
        }
        if (lowerCasedGirdKey.endsWith(helpers.variable + "grid")) {
            helperName = helpers.variable;
        }
        return helperName;
    },
    getVariableComponents: function (title, property, weight, selectorExtension, required, insideRow, selectorArguments) {
        if (selectorExtension === void 0) { selectorExtension = {}; }
        if (required === void 0) { required = false; }
        if (insideRow === void 0) { insideRow = false; }
        if (selectorArguments === void 0) { selectorArguments = {}; }
        return this.getHelperComponents(this.helpers.variable, title, property, weight, selectorExtension, required, insideRow, selectorArguments);
    },
    getConditionComponents: function (title, property, weight, selectorExtension, required, insideRow, selectorArguments) {
        if (selectorExtension === void 0) { selectorExtension = {}; }
        if (required === void 0) { required = false; }
        if (insideRow === void 0) { insideRow = false; }
        if (selectorArguments === void 0) { selectorArguments = {}; }
        return this.getHelperComponents(this.helpers.condition, title, property, weight, selectorExtension, required, insideRow, selectorArguments);
    },
    getHelperComponents: function (helper, title, property, weight, selectorExtension, required, insideRow, selectorArguments) {
        if (selectorExtension === void 0) { selectorExtension = { key: '' }; }
        if (required === void 0) { required = false; }
        if (insideRow === void 0) { insideRow = false; }
        if (selectorArguments === void 0) { selectorArguments = {}; }
        var helperTypes = { new: 'new', existing: 'existing' };
        var lowerCasedHelper = helper.toLowerCase();
        var helperValueKey = selectorExtension.key;
        var helperTypeKey = "" + property + (property ? helper : lowerCasedHelper) + "Type";
        var helperGridKey = "" + property + (property ? helper : lowerCasedHelper) + "Grid";
        return [
            {
                label: title,
                optionsLabelPosition: 'right',
                inline: true,
                values: [
                    { label: "New " + helper, value: helperTypes.new, shortcut: '' },
                    { label: "Existing " + helper, value: helperTypes.existing, shortcut: '' },
                ],
                key: helperTypeKey,
                type: 'radio',
                validate: { required: required },
                input: true,
                weight: weight
            },
            {
                label: 'Container',
                hideLabel: true,
                tableView: false,
                key: "" + property + (property ? helper : lowerCasedHelper) + "Container-" + helperTypes.existing,
                type: 'custom',
                input: false,
                conditional: { show: true, when: helperTypeKey, eq: helperTypes.existing },
                components: [
                    __assign(__assign({}, this[lowerCasedHelper + "Selector"](selectorArguments)), selectorExtension),
                ],
                weight: weight + 5,
            },
            {
                label: 'Container',
                hideLabel: true,
                tableView: false,
                key: "" + property + (property ? helper : lowerCasedHelper) + "Container-" + helperTypes.new,
                type: 'custom',
                input: false,
                conditional: { show: true, when: helperTypeKey, eq: helperTypes.new },
                components: [
                    {
                        'label': helper + ":",
                        'disabled': true,
                        'key': helperValueKey,
                        'type': 'textfield',
                        'input': true
                    },
                    {
                        'label': helper + " Btns Wrapper",
                        'columns': [{
                                'components': [{
                                        'label': 'Edit',
                                        'action': 'custom',
                                        'showValidations': false,
                                        'key': "edit" + helper,
                                        'type': 'button',
                                        custom: function (_a) {
                                            var data = _a.data, instance = _a.instance, row = _a.row, components = _a.components;
                                            var context = insideRow ? row : data;
                                            var helperGrid = instance.parent.parent.getComponent(helperGridKey);
                                            var helpers = components[lowerCasedHelper + "s"];
                                            var editHelper = helpers.dataValue.find(function (helper) { return helper.key === _.get(context, helperValueKey); });
                                            helperGrid.hideFromEditing = false;
                                            helperGrid.helperEditing = true;
                                            helperGrid.parent.checkConditions();
                                            if (editHelper) {
                                                helperGrid.editHelper = editHelper;
                                                var editRowValue = _.cloneDeep(editHelper);
                                                var editRow = {
                                                    components: helperGrid.createRowComponents(editRowValue, 0),
                                                    data: editRowValue,
                                                    state: 'new',
                                                    error: null,
                                                };
                                                helperGrid.editRows[0] = editRow;
                                                helperGrid.redraw();
                                            }
                                        },
                                        'input': true
                                    }],
                                'width': 1,
                                'offset': 0,
                                'push': 0,
                                'pull': 0,
                                'size': 'md',
                                'currentWidth': 1
                            },
                            {
                                'components': [{
                                        'label': 'Delete',
                                        'action': 'custom',
                                        'showValidations': false,
                                        'theme': 'danger',
                                        'key': "delete" + helper,
                                        'type': 'button',
                                        'input': true,
                                        custom: function (_a) {
                                            var data = _a.data, instance = _a.instance, row = _a.row, components = _a.components;
                                            var context = insideRow ? row : data;
                                            var helpers = components[lowerCasedHelper + "s"];
                                            helpers.dataValue = helpers.dataValue.filter(function (helper) { return helper.key !== _.get(context, helperValueKey); });
                                            helpers.rebuild();
                                            var helperGrid = instance.parent.parent.getComponent(helperGridKey);
                                            helperGrid.hideFromEditing = false;
                                            helperGrid.editHelper = null;
                                            helperGrid.helperEditing = false;
                                            helperGrid.resetValue();
                                            var helper = instance.parent.parent.components.find(function (comp) { return comp.key === helperValueKey; });
                                            ;
                                            helper.resetValue();
                                        },
                                    }],
                                'width': 1,
                                'offset': 0,
                                'push': 0,
                                'pull': 0,
                                'size': 'md',
                                'currentWidth': 1
                            }],
                        'key': lowerCasedHelper + "BtnsWrapper",
                        customConditional: function (_a) {
                            var row = _a.row, instance = _a.instance;
                            var helperGrid = instance.parent.getComponent(helperGridKey);
                            return !!_.get(row, helperValueKey) && (!helperGrid || !(!helperGrid.hideFromEditing && helperGrid.helperEditing));
                        },
                        'type': 'columns',
                        'input': false,
                    },
                    this["get" + helper + "sEditForm"]({
                        editGridAdditionalSettings: {
                            validate: { maxLength: 1 },
                            inlineEdit: false,
                            openWhenEmpty: true,
                            key: helperGridKey,
                            helperValueKey: helperValueKey,
                            customConditional: function (_a) {
                                var instance = _a.instance;
                                var helper = instance.parent.components.find(function (comp) { return comp.key === helperValueKey; });
                                return (!instance.hideFromEditing && instance.helperEditing) || !helper.dataValue;
                            }
                        },
                        hideHeader: true,
                    })
                ],
                weight: weight + 10,
            },
        ];
    },
    getModeComponentsFromBase: function (base, property, mode) {
        var basePanel = base.find(function (_a) {
            var key = _a.key;
            return key === property + "Panel";
        });
        var modeComponents = [];
        if (basePanel) {
            var modeDescriptionComp = basePanel.components[0];
            var modePanel = basePanel.components.find(function (_a) {
                var key = _a.key;
                return key === property + "-" + mode;
            }) || {};
            modeComponents = __spreadArrays([modeDescriptionComp], (_.isArray(modePanel.components) ? modePanel.components : []));
        }
        return modeComponents;
    },
    getAdvancedValidationsEditForm: function () {
        return {
            label: 'Validations',
            key: 'validations',
            input: true,
            hideLabel: true,
            type: 'editgrid',
            inlineEdit: true,
            templates: {
                header: ("<div class=\"row\">\n              <div class=\"col-sm-2\">Mode</div>\n              <div class=\"col-sm-4\">Description</div>\n              <div class=\"col-sm-2\">Group</div>\n              <div class=\"col-sm-2\">Severity</div>\n              <div class=\"col-sm-2\">Actions</div>\n            </div>"),
                row: ("<div class=\"row\">\n              <div class=\"col-sm-2\">{{ row.mode }}</div>\n              <div class=\"col-sm-4\">{{ row.description ? row.description : row.condition }}</div>\n              <div class=\"col-sm-2\">{{ row.group }}</div>\n              <div class=\"col-sm-2\">{{ flattenedComponents.severity.getView(row.severity) || 'Error'}}</div>\n              <div class=\"col-sm-2\">\n                <button class=\"btn btn-default btn-light btn-sm editRow\">Edit</button>\n                <button class=\"btn btn-danger btn-sm removeRow\">Delete</button>\n              </div>\n            </div>"),
            },
            addAnother: 'Add Validation',
            saveRow: 'Save Validation',
            components: this.getModesComponents('Create Validation using:', '', 0, {
                ui: EditFormUtils.advancedValidationEditFormComponents.ui(),
                js: EditFormUtils.advancedValidationEditFormComponents.js(),
                json: EditFormUtils.advancedValidationEditFormComponents.json(),
            })
        };
    }
};
export default EditFormUtils;
