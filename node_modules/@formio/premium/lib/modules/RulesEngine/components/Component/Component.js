var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import _ from 'lodash';
import { Components, Formio } from 'formiojs';
import editForm from './Component.form';
import EditFormUtils from './editForm/utils';
var BaseComponent = Components.components.component;
if (Formio.rulesEntities) {
    var originalSchema_1 = BaseComponent.schema;
    BaseComponent.schema = function () {
        var extend = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extend[_i] = arguments[_i];
        }
        var uiMode = EditFormUtils.editModes.ui.key;
        return originalSchema_1.apply(void 0, __spreadArrays([{
                advancedVisibilityConditionMode: uiMode,
                customDefaultValueMode: uiMode,
                calculateValueMode: uiMode,
                conditionalVisibilityComplexity: '',
            }], extend));
    };
    Object.defineProperty(BaseComponent.prototype, 'logicOptions', {
        enumerable: true,
        configurable: true,
        get: function () {
            var targetComponentInstance = this;
            var sourceComponentInstance = this;
            var formInstance = this.root;
            return {
                targetComponentInstance: targetComponentInstance,
                sourceComponentInstance: sourceComponentInstance,
                formInstance: formInstance,
            };
        }
    });
    Object.defineProperty(BaseComponent.prototype, 'previewMode', {
        enumerable: true,
        configurable: true,
        get: function () {
            return Boolean(this.options.preview);
        }
    });
    Object.defineProperty(BaseComponent.prototype, 'engineOptions', {
        enumerable: true,
        configurable: true,
        get: function () {
            return {};
        }
    });
    Object.defineProperty(BaseComponent.prototype, 'logicContext', {
        enumerable: true,
        configurable: true,
        get: function () {
            return {
                options: this.logicOptions,
                engineOptions: this.engineOptions,
            };
        }
    });
    Object.defineProperty(BaseComponent.prototype, 'conditions', {
        enumerable: true,
        configurable: true,
        get: function () {
            var _a;
            return (_a = this.component.conditions) !== null && _a !== void 0 ? _a : [];
        }
    });
    Object.defineProperty(BaseComponent.prototype, 'variables', {
        enumerable: true,
        configurable: true,
        get: function () {
            var _a;
            return (_a = this.component.variables) !== null && _a !== void 0 ? _a : [];
        }
    });
    BaseComponent.prototype.transformComponentValidationSettings = function transformComponentValidationSettings() {
        if (this.builderMode) {
            var customValidation = _.get(this.component, 'validate.custom', null);
            var validatePrivate = _.get(this.component, 'validate.customPrivate', false);
            var jsonValidation = _.get(this.component, 'validate.json', null);
            var validations = _.isArray(this.component.validations) ? this.component.validations : [];
            if (customValidation) {
                validations.push({
                    advancedValidationMode: 'js',
                    validate: {
                        custom: customValidation,
                        customPrivate: validatePrivate
                    }
                });
                _.unset(this.component, 'validate.custom');
                _.unset(this.component, 'validate.customPrivate');
            }
            if (jsonValidation) {
                validations.push({
                    advancedValidationMode: 'json',
                    validate: {
                        json: jsonValidation,
                    }
                });
                _.unset(this.component, 'validate.json');
            }
            _.set(this.component, 'validations', validations);
        }
    };
    BaseComponent.prototype.transformConditionalVisibilitySettings = function transformConditionalVisibilitySettings() {
        if (this.builderMode) {
            var complexityPropertyName = 'conditionalVisibilityComplexity';
            var modePropertyName = 'advancedVisibilityConditionMode';
            var simpleConditional = _.get(this.component, 'conditional.when', null);
            var jsonConditional = _.get(this.component, 'conditional.json', null);
            var jsConditional = _.get(this.component, 'customConditional', null);
            var conditionComplexity = _.get(this.component, complexityPropertyName, null);
            if (simpleConditional && !conditionComplexity) {
                _.set(this.component, complexityPropertyName, 'simple');
            }
            if (jsonConditional && !conditionComplexity) {
                _.set(this.component, complexityPropertyName, 'advanced');
                _.set(this.component, modePropertyName, EditFormUtils.editModes.json.key);
            }
            if (jsConditional && !conditionComplexity) {
                _.set(this.component, complexityPropertyName, 'advanced');
                _.set(this.component, modePropertyName, EditFormUtils.editModes.js.key);
            }
        }
    };
    BaseComponent.prototype.transformCustomDefaultValueSettings = function transformCustomDefaultValueSettings() {
        if (this.builderMode) {
            var modePropertyName = 'customDefaultValueMode';
            var customDefaultValue = _.get(this.component, 'customDefaultValue', '');
            var isJsValue = (/^(\")?value(\s+)?=/i).test(customDefaultValue);
            var mode = _.get(this.component, modePropertyName, null);
            // ui mode is set by default
            if (customDefaultValue && mode === EditFormUtils.editModes.ui.key) {
                _.set(this.component, modePropertyName, isJsValue ? EditFormUtils.editModes.js.key : EditFormUtils.editModes.json.key);
            }
        }
    };
    BaseComponent.prototype.transformCalculateValueSettings = function transformCalculateValueSettings() {
        if (this.builderMode) {
            var modePropertyName = 'calculateValueMode';
            var calculateValue = _.get(this.component, 'calculateValue', '');
            var isJsValue = (/^(\")?value(\s+)?=/i).test(calculateValue);
            var mode = _.get(this.component, modePropertyName, null);
            // ui mode is set by default
            if (calculateValue && mode === EditFormUtils.editModes.ui.key) {
                _.set(this.component, modePropertyName, isJsValue ? EditFormUtils.editModes.js.key : EditFormUtils.editModes.json.key);
            }
        }
    };
    BaseComponent.prototype.transformLogicValueActionSettings = function transformLogicValueActionSettings() {
        if (this.builderMode) {
            var logic = _.get(this.component, 'logic', []);
            if (_.isArray(logic) && logic.length) {
                _.each(logic, function (logicPart) {
                    var actions = _.get(logicPart, 'actions', []);
                    if (_.isArray(actions) && actions.length) {
                        _.each(actions, function (action) {
                            if (!action.actionVariableMode && _.isEqual(action.type, 'value') && (/^(\")?value(\s+)?=/i).test(action.value)) {
                                _.set(action, 'actionVariableMode', EditFormUtils.editModes.js.key);
                            }
                        });
                    }
                });
            }
        }
    };
    var originalInit_1 = BaseComponent.prototype.init;
    BaseComponent.prototype.init = function init() {
        this.transformComponentValidationSettings();
        this.transformConditionalVisibilitySettings();
        this.transformCalculateValueSettings();
        this.transformCustomDefaultValueSettings();
        this.transformLogicValueActionSettings();
        originalInit_1.call(this);
    };
    BaseComponent.prototype.calculateCondition = function calculateCondition(name, context) {
        var _this = this;
        var _a;
        if (context === void 0) { context = this.logicContext; }
        if (!Formio.rulesEntities.Conjunctions) {
            return true;
        }
        if (this.lockedConditions.has(name)) {
            throw new Error("Found recurrent reference with condition '" + name + "'.");
        }
        var cachedValue = this.conditionsCache[name];
        if (cachedValue) {
            return cachedValue;
        }
        var updatedContext = this.updateLogicContext(context);
        var condition = this.conditions.find(function (_a) {
            var key = _a.key;
            return (key === name);
        });
        if (!condition) {
            if (this.parent) {
                return this.parent.calculateCondition(name, updatedContext);
            }
            return false;
        }
        this.lockedConditions.add(name);
        var _b = condition.parts, parts = _b === void 0 ? [] : _b;
        var partsResults = parts.map((function (part) {
            var evaluationContext = {
                part: part,
                context: updatedContext,
            };
            var evaluator = function (_a) {
                var _b = _a === void 0 ? evaluationContext : _a, _c = _b.part, part = _c === void 0 ? evaluationContext.part : _c, _d = _b.context, context = _d === void 0 ? evaluationContext.context : _d;
                return _this.calculateConditionPart(part, context);
            };
            evaluator.evaluationContext = evaluationContext;
            return evaluator();
        }));
        var conditionString = 'result=';
        parts.forEach(function (part, index) {
            if (!index) {
                if (part.not) {
                    var Conjunction_1 = Formio.rulesEntities.Conjunctions.getConjunction('not');
                    conditionString += "" + Conjunction_1.operator + partsResults[index];
                }
                else {
                    conditionString += "" + partsResults[index];
                }
                return;
            }
            var Conjunction = Formio.rulesEntities.Conjunctions.getConjunction(part.conjunction);
            if (!Conjunction) {
                return;
            }
            conditionString += "" + Conjunction.operator + partsResults[index];
        });
        var result = this.evaluate(conditionString, {}, 'result');
        this.lockedConditions.delete(name);
        var _c = ((_a = updatedContext.engineOptions) !== null && _a !== void 0 ? _a : this.engineOptions).cachable, cachable = _c === void 0 ? true : _c;
        if (cachable) {
            this.conditionsCache[name] = result;
        }
        return result;
    };
    BaseComponent.prototype.updateLogicContext = function updateLogicContext(context) {
        return __assign(__assign({}, context), { targetComponentInstance: this });
    };
    BaseComponent.prototype.calculateConditionPart = function calculateConditionPart(conditionPart, context) {
        if (context === void 0) { context = this.logicContext; }
        var updatedContext = this.updateLogicContext(context);
        var type = conditionPart.type;
        if (type === 'existing') {
            var condition = conditionPart.condition;
            return this.calculateCondition(condition, updatedContext);
        }
        if (type === 'new') {
            var value = conditionPart.value, operator = conditionPart.operator;
            return this.calculateOperator(operator, updatedContext, { value: value });
        }
        return false;
    };
    BaseComponent.prototype.calculateOperator = function calculateOperator(operator, context, operatorFirstPart) {
        var _this = this;
        if (context === void 0) { context = this.logicContext; }
        if (operatorFirstPart === void 0) { operatorFirstPart = {}; }
        if (!Formio.rulesEntities.Operators) {
            return true;
        }
        var updatedContext = this.updateLogicContext(context);
        var _a = operator, name = _a.name, _b = name + "Arguments", _c = _a[_b], args = _c === void 0 ? {} : _c, _d = name + "Options", _e = _a[_d], options = _e === void 0 ? {} : _e;
        var Operator = Formio.rulesEntities.Operators.getOperator(name);
        if (!Operator) {
            return false;
        }
        var presetArguments = Operator.presetArguments;
        var operatorInstance = new Operator(updatedContext);
        return operatorInstance.execute(_.mapValues(__assign(__assign(__assign({}, presetArguments), args), operatorFirstPart), function (value) {
            var _a = value, valueSource = _a.valueSource, _b = valueSource + "Input", input = _a[_b];
            var evaluationContext = {
                valueSource: valueSource,
                input: input,
                context: updatedContext,
            };
            var evaluator = function (_a) {
                var _b = _a === void 0 ? evaluationContext : _a, _c = _b.valueSource, valueSource = _c === void 0 ? evaluationContext.valueSource : _c, _d = _b.input, input = _d === void 0 ? evaluationContext.input : _d, _e = _b.context, context = _e === void 0 ? evaluationContext.context : _e;
                return _this.calculateValueDefinition(valueSource, input, context);
            };
            evaluator.evaluationContext = evaluationContext;
            return Operator.lazyArgsEvaluation ? evaluator : evaluator();
        }), options);
    };
    BaseComponent.prototype.calculateValueDefinition = function calculateValueDefinition(valueSource, input, context) {
        if (context === void 0) { context = this.logicContext; }
        if (!Formio.rulesEntities.ValueSources) {
            return true;
        }
        var updatedContext = this.updateLogicContext(context);
        var ValueSource = Formio.rulesEntities.ValueSources.getValueSource(valueSource);
        if (!ValueSource) {
            return null;
        }
        var valueSourceInstance = new ValueSource(updatedContext);
        return valueSourceInstance.getValue(input);
    };
    BaseComponent.prototype.calculateVariable = function calculateVariable(name, context) {
        var _this = this;
        var _a;
        if (context === void 0) { context = this.logicContext; }
        // Identify recurrent reference.
        if (this.lockedVariables.has(name)) {
            throw new Error("Found recurrent reference with variable '" + name + "'.");
        }
        var cachedValue = this.variablesCache[name];
        if (cachedValue) {
            return cachedValue;
        }
        var updatedContext = this.updateLogicContext(context);
        var variable = this.variables.find(function (_a) {
            var key = _a.key;
            return (key === name);
        });
        if (!variable) {
            if (this.parent) {
                return this.parent.calculateVariable(name, updatedContext);
            }
            return null;
        }
        this.lockedVariables.add(name);
        var _b = variable, valueSource = _b.valueSource, _c = valueSource + "Input", input = _b[_c], _d = _b.transform, transform = _d === void 0 ? {} : _d;
        var evaluationContext = {
            valueSource: valueSource,
            input: input,
            context: updatedContext,
        };
        var valueEvaluator = function (_a) {
            var _b = _a === void 0 ? evaluationContext : _a, _c = _b.valueSource, valueSource = _c === void 0 ? evaluationContext.valueSource : _c, _d = _b.input, input = _d === void 0 ? evaluationContext.input : _d, _e = _b.context, context = _e === void 0 ? evaluationContext.context : _e;
            return _this.calculateValueDefinition(valueSource, input, context);
        };
        valueEvaluator.evaluationContext = evaluationContext;
        var result = this.applyTransform(valueEvaluator, transform, updatedContext);
        this.lockedVariables.delete(name);
        var _e = ((_a = updatedContext.engineOptions) !== null && _a !== void 0 ? _a : this.engineOptions).cachable, cachable = _e === void 0 ? true : _e;
        if (cachable) {
            this.variablesCache[name] = result;
        }
        return result;
    };
    BaseComponent.prototype.applyTransform = function applyTransform(valueEvaluator, transform, context) {
        var _this = this;
        if (context === void 0) { context = this.logicContext; }
        if (!Formio.rulesEntities) {
            return true;
        }
        var updatedContext = this.updateLogicContext(context);
        var _a = transform, _b = _a.name, name = _b === void 0 ? 'identity' : _b, _c = name + "Arguments", _d = _a[_c], args = _d === void 0 ? {} : _d, _e = name + "Options", _f = _a[_e], options = _f === void 0 ? {} : _f;
        var Transformer = Formio.rulesEntities.Transformers.getTransformer(name);
        if (!Transformer) {
            return valueEvaluator();
        }
        var presetArguments = Transformer.presetArguments;
        var transformerInstance = new Transformer(updatedContext);
        return transformerInstance.transform((Transformer.lazyValueEvaluation ? valueEvaluator : valueEvaluator()), _.mapValues(__assign(__assign({}, presetArguments), args), function (value) {
            var _a = value, valueSource = _a.valueSource, _b = valueSource + "Input", input = _a[_b];
            var evaluationContext = {
                valueSource: valueSource,
                input: input,
                context: updatedContext,
            };
            var evaluator = function (_a) {
                var _b = _a === void 0 ? evaluationContext : _a, _c = _b.valueSource, valueSource = _c === void 0 ? evaluationContext.valueSource : _c, _d = _b.input, input = _d === void 0 ? evaluationContext.input : _d, _e = _b.context, context = _e === void 0 ? evaluationContext.context : _e;
                return _this.calculateValueDefinition(valueSource, input, context);
            };
            evaluator.evaluationContext = evaluationContext;
            return Transformer.lazyArgsEvaluation ? evaluator : evaluator();
        }), options);
    };
    BaseComponent.prototype.getRowIndexes = function getRowIndexes() {
        var indexes = {};
        var currentComponent = this;
        while (currentComponent.parent) {
            var parent_1 = currentComponent.parent;
            if (['editgrid', 'datagrid'].includes(parent_1.component.type)) {
                indexes[parent_1.path] = currentComponent.rowIndex;
            }
            currentComponent = parent_1;
        }
        return indexes;
    };
    BaseComponent.prototype.resetCaches = function resetCaches() {
        this.conditionsCache = {};
        this.variablesCache = {};
        this.lockedConditions = new Set();
        this.lockedVariables = new Set();
    };
    BaseComponent.prototype.getCustomDefaultValue = function getCustomDefaultValue(defaultValue) {
        if (!this.previewMode) {
            if (this.component.customDefaultValueVariable) {
                defaultValue = this.calculateVariable(this.component.customDefaultValueVariable);
            }
            else if (this.component.customDefaultValue) {
                defaultValue = this.evaluate(this.component.customDefaultValue, { value: '' }, 'value');
            }
        }
        return defaultValue;
    };
    BaseComponent.prototype.doValueCalculation = function doValueCalculation(dataValue, data, row) {
        return this.component.calculateValueVariable
            ? this.calculateVariable(this.component.calculateValueVariable)
            : this.evaluate(this.component.calculateValue, {
                value: dataValue,
                data: data,
                row: row || this.data
            }, 'value');
    };
    var originalDefineActionValue_1 = BaseComponent.prototype.defineActionValue;
    BaseComponent.prototype.defineActionValue = function defineActionValue(action, argsObject) {
        return action.variable
            ? this.calculateVariable(action.variable)
            : originalDefineActionValue_1.call(this, action, argsObject);
    };
    BaseComponent.editForm = editForm;
    Components.baseEditForm = editForm;
    Components.EditFormUtils = EditFormUtils;
}
export default BaseComponent;
