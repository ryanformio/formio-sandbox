declare const EditFormUtils: {
    sortAndFilterComponents(components: any): any;
    unifyComponents(objValue: any, srcValue: any): any;
    redefineComponentPrecreatedTemplates(quickRules?: any[]): {
        key: string;
        components: {
            key: string;
            components: {
                key: string;
                components: {
                    key: string;
                    overrideEditForm: boolean;
                    components: any;
                }[];
            }[];
        }[];
    };
    filterAndTransformSettings(items: any): any;
    logicVariablesTable(additional: any): {
        type: string;
        tag: string;
        content: string;
    };
    logicSectionHandler: {
        js({ commonName, property, example, }: {
            commonName: any;
            property: any;
            example: any;
        }): {
            type: string;
            title: string;
            collapsible: boolean;
            collapsed: boolean;
            style: {
                'margin-bottom': string;
            };
            key: string;
            customConditional(): boolean;
            components: ({
                type: string;
                key: any;
                rows: number;
                editor: string;
                hideLabel: boolean;
                input: boolean;
                tag?: undefined;
                content?: undefined;
            } | {
                type: string;
                tag: string;
                content: string;
                key?: undefined;
                rows?: undefined;
                editor?: undefined;
                hideLabel?: undefined;
                input?: undefined;
            })[];
        };
        json({ commonName, property, example, }: {
            commonName: any;
            property: any;
            example: any;
        }): {
            type: string;
            title: string;
            collapsible: boolean;
            collapsed: boolean;
            key: string;
            components: ({
                type: string;
                tag: string;
                content: string;
                key?: undefined;
                rows?: undefined;
                editor?: undefined;
                hideLabel?: undefined;
                as?: undefined;
                input?: undefined;
            } | {
                type: string;
                key: any;
                rows: number;
                editor: string;
                hideLabel: boolean;
                as: string;
                input: boolean;
                tag?: undefined;
                content?: undefined;
            })[];
        };
        variable({ commonName, property, }: {
            commonName: any;
            property: any;
        }): {
            type: string;
            title: string;
            collapsible: boolean;
            collapsed: boolean;
            key: string;
            components: {
                key: any;
                type: string;
                input: boolean;
                label: string;
                dataSrc: string;
                groupProperty: string;
                dataType: string;
                data: {
                    custom(args: any): any;
                };
                valueProperty: string;
                template: string;
            }[];
        };
        condition({ commonName, property, }: {
            commonName: any;
            property: any;
        }): {
            type: string;
            title: string;
            collapsible: boolean;
            collapsed: boolean;
            key: string;
            components: {
                key: any;
                type: string;
                input: boolean;
                label: string;
                dataSrc: string;
                groupProperty: string;
                dataType: string;
                data: {
                    custom(args: any): any;
                };
                valueProperty: string;
                template: string;
            }[];
        };
    };
    javaScriptValue(title: any, property: any, weight: any, logicSections: any, additionalParams?: any): {
        type: string;
        title: any;
        theme: string;
        collapsible: boolean;
        collapsed: boolean;
        key: string;
        weight: any;
        components: any[];
    };
    valueDeclaration({ customConditions, customVariables, excludeConditions, excludeValueSources, excludeVariables, required, valueSourceExtension, }?: {
        customConditions?: any;
        customVariables?: any;
        excludeConditions?: any[];
        excludeValueSources?: any[];
        excludeVariables?: any[];
        required?: boolean;
        valueSourceExtension?: {};
    }): any[];
    variableSelector({ customValues, exclude, }?: {
        customValues?: any;
        exclude?: any[];
    }): {
        type: string;
        input: boolean;
        key: string;
        label: string;
        dataSrc: string;
        groupProperty: string;
        dataType: string;
        data: {
            custom(args: any): any;
        };
        valueProperty: string;
        template: string;
    };
    conditionSelector({ customValues, exclude, conditionSelectorExtension }?: {
        customValues?: any;
        exclude?: any[];
        conditionSelectorExtension?: {};
    }): {
        type: string;
        input: boolean;
        key: string;
        label: string;
        dataSrc: string;
        groupProperty: string;
        dataType: string;
        data: {
            custom(args: any): any;
        };
        valueProperty: string;
        template: string;
    };
    getTransformer({ title, itemName: name, itemArguments, presetArguments, optionsEditForm, }: {
        title: any;
        itemName: any;
        itemArguments: any;
        presetArguments?: {};
        optionsEditForm: any;
    }, { customConditions, customVariables, excludeValueSources, excludeVariables, valueSourceExtension }?: {
        customConditions?: any;
        customVariables?: any;
        excludeValueSources?: any[];
        excludeVariables?: any[];
        valueSourceExtension?: {};
    }): {
        label: string;
        key: string;
        type: string;
        input: boolean;
        lazyLoad: boolean;
        components: any;
        conditional: {
            json: {
                '===': any[];
            };
        };
    }[];
    getOperator({ title, itemName: name, itemArguments, presetArguments, optionsEditForm, }: {
        title: any;
        itemName: any;
        itemArguments: any;
        presetArguments?: {};
        optionsEditForm: any;
    }, { customConditions, customVariables, excludeConditions, excludeValueSources, valueSourceExtension }?: {
        customConditions?: any;
        customVariables?: any;
        excludeConditions?: any[];
        excludeValueSources?: any[];
        valueSourceExtension?: {};
    }): {
        label: any;
        key: string;
        type: string;
        input: boolean;
        lazyLoad: boolean;
        components: any;
        conditional: {
            json: {
                '===': any[];
            };
        };
    }[];
    getArgument({ name, key, required, extendedContainerParameters }: {
        name: any;
        key: any;
        required?: boolean;
        extendedContainerParameters?: {};
    }, { customConditions, customVariables, excludeConditions, excludeValueSources, excludeVariables, valueSourceExtension, hideLabel, }?: {
        customConditions?: any;
        customVariables?: any;
        excludeConditions?: any[];
        excludeValueSources?: any[];
        excludeVariables?: any[];
        valueSourceExtension?: {};
        hideLabel?: boolean;
    }): {
        label: any;
        hideLabel: boolean;
        key: any;
        type: string;
        input: boolean;
        components: any[];
    };
    defaultPrecreatedTemplates: string[];
    getComponentPrecreatedTemplates(rulesList?: any[]): any;
    addQuickRules(QuickRules?: any[]): ({
        label: string;
        key: string;
        type: string;
        conditional: {
            show: boolean;
            when: string;
            eq: any;
        };
        components: any;
    } | {
        label: string;
        widget: string;
        tooltip: string;
        data: {
            values: {
                label: any;
                value: any;
            }[];
        };
        key: string;
        type: string;
        input: boolean;
    })[];
    valueSourcePlaceholder: string;
    getVariablesEditForm({ customConditions, customVariables, excludeValueSources, editGridAdditionalSettings, hideHeader }?: {
        customConditions?: any;
        customVariables?: any;
        excludeValueSources?: any[];
        editGridAdditionalSettings?: {};
        hideHeader?: boolean;
    }): {};
    getConditionsEditForm({ customConditions, customVariables, excludeValueSources, editGridAdditionalSettings, hideHeader }?: {
        customConditions?: any;
        customVariables?: any;
        excludeValueSources?: any[];
        editGridAdditionalSettings?: {};
        hideHeader?: boolean;
    }): {};
    getWebformLogicEditFormSettings(): {
        customConditions({ data }: {
            data: any;
        }): any;
        customVariables({ data }: {
            data: any;
        }): any;
        excludeValueSources: string[];
    };
    getPanel(title: any, property: any, weight: any, tooltip: any, components: any): {
        type: string;
        title: any;
        theme: string;
        collapsible: boolean;
        collapsed: boolean;
        tooltip: any;
        key: string;
        weight: any;
        components: any;
    };
    editModes: {
        ui: {
            name: string;
            key: string;
        };
        js: {
            name: string;
            key: string;
        };
        json: {
            name: string;
            key: string;
        };
    };
    getModesComponents(label: any, property: any, weight: any, components?: {}): any[];
    advancedDefaultValueEditFormComponents: {
        ui(): any;
        js(): any[];
        json(): any[];
    };
    calculatedValueEditFormComponents: {
        ui(): any;
        js(): any[];
        json(): any[];
    };
    advancedConditionEditFormComponents: {
        ui(): any;
        js(): any[];
        json(): any[];
    };
    advancedValidationEditFormComponents: {
        ui(): ({
            label: string;
            key: string;
            type: string;
            input: boolean;
            components: any;
            hideLabel?: undefined;
            tableView?: undefined;
        } | {
            label: string;
            hideLabel: boolean;
            tableView: boolean;
            key: string;
            type: string;
            input: boolean;
            components: any[];
        })[];
        js(): any;
        json(): any[];
    };
    helpers: {
        condition: string;
        variable: string;
    };
    defineHelper(gridKey: any): string;
    getVariableComponents(title: any, property: any, weight: any, selectorExtension?: {}, required?: boolean, insideRow?: boolean, selectorArguments?: {}): any;
    getConditionComponents(title: any, property: any, weight: any, selectorExtension?: {}, required?: boolean, insideRow?: boolean, selectorArguments?: {}): any;
    getHelperComponents(helper: any, title: any, property: any, weight: any, selectorExtension?: any, required?: boolean, insideRow?: boolean, selectorArguments?: {}): ({
        label: any;
        optionsLabelPosition: string;
        inline: boolean;
        values: {
            label: string;
            value: string;
            shortcut: string;
        }[];
        key: string;
        type: string;
        validate: {
            required: boolean;
        };
        input: boolean;
        weight: any;
        hideLabel?: undefined;
        tableView?: undefined;
        conditional?: undefined;
        components?: undefined;
    } | {
        label: string;
        hideLabel: boolean;
        tableView: boolean;
        key: string;
        type: string;
        input: boolean;
        conditional: {
            show: boolean;
            when: string;
            eq: string;
        };
        components: any[];
        weight: any;
        optionsLabelPosition?: undefined;
        inline?: undefined;
        values?: undefined;
        validate?: undefined;
    })[];
    getModeComponentsFromBase(base: any, property: any, mode: any): any[];
    getAdvancedValidationsEditForm(): {
        label: string;
        key: string;
        input: boolean;
        hideLabel: boolean;
        type: string;
        inlineEdit: boolean;
        templates: {
            header: string;
            row: string;
        };
        addAnother: string;
        saveRow: string;
        components: any;
    };
};
export default EditFormUtils;
