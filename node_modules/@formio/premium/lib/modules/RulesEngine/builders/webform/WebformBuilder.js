var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Builders, Utils, Displays, Formio } from 'formiojs';
import editForm from './editForm';
import _ from 'lodash';
import Tooltip from 'tooltip.js';
import EditFormUtils from '../../components/Component/editForm/utils';
var WebformBuilder = Builders.builders.webform;
var Webform = Displays.displays.webform;
if (Formio.rulesEntities) {
    WebformBuilder.editForm = editForm;
    WebformBuilder.prototype.getNestedComponents = function getNestedComponents(components, path) {
        var _this = this;
        if (components === void 0) { components = []; }
        if (path === void 0) { path = ''; }
        var nestedDataComponents = ['container', 'datagrid', 'editgrid'];
        var arrayDataComponents = ['datagrid', 'editgrid'];
        var mappedComponents = this.pathComponentsMapping[path] = [];
        Utils.eachComponent(components, function (component) {
            if (component.input) {
                mappedComponents.push(component);
            }
            if (nestedDataComponents.includes(component.type)) {
                var nestedPath = path ? path + "." + component.key : component.key;
                _this.nestedDataComponents.push({
                    path: nestedPath,
                    component: component,
                });
                if (arrayDataComponents.includes(component.type)) {
                    _this.arrayDataComponentPaths.push(nestedPath);
                    _this.arrayDataComponents.push({
                        path: nestedPath,
                        component: component,
                    });
                }
                _this.getNestedComponents(component.components, nestedPath);
                return true;
            }
            return false;
        }, true);
    };
    WebformBuilder.prototype.getNestedComponentsMap = function getNestedComponentsMap() {
        this.pathComponentsMapping = {};
        this.arrayDataComponentPaths = [];
        this.nestedDataComponents = [];
        this.arrayDataComponents = [];
        this.getNestedComponents(this.getComponents());
    };
    WebformBuilder.prototype.getComponents = function getComponents() {
        return this.webform.schema.components;
    };
    WebformBuilder.prototype.updateComponent = function updateComponent(component, changed) {
        // Update the preview.
        if (this.preview) {
            var sidebarFormTabs = this.preview.components[0];
            var editFormTabs = this.editForm.components[0];
            var tabIndex = editFormTabs.currentTab;
            sidebarFormTabs.setTab(tabIndex);
            if (sidebarFormTabs.tabs[tabIndex].length) {
                this.editFormWrapper.classList.add('col-sm-6');
                this.editFormWrapper.classList.remove('col-sm-12');
                this.sidebarFormWrapper.classList.remove('d-none');
            }
            else {
                this.editFormWrapper.classList.add('col-sm-12');
                this.editFormWrapper.classList.remove('col-sm-6');
                this.sidebarFormWrapper.classList.add('d-none');
            }
            var previewComponent = Utils.getComponent(this.preview.components, 'preview', false);
            if (previewComponent) {
                _.assign(previewComponent.component, _.omit(component, [
                    'hidden',
                    'conditional',
                    'customDefaultValue',
                    'customDefaultValueVariable',
                    'calculateValue',
                    'calculateValueVariable',
                    'logic',
                    'autofocus',
                    'customConditional',
                    'validations',
                ]));
                previewComponent.component.config = this.options.formConfig || {};
                previewComponent.rebuild();
            }
        }
        // Change the "default value" field to be reflective of this component.
        var defaultValueComponent = Utils.getComponent(this.editForm.components, 'defaultValue', false);
        if (defaultValueComponent) {
            var defaultChanged = changed && ((changed.component && changed.component.key === 'defaultValue')
                || (changed.instance && defaultValueComponent.hasComponent && defaultValueComponent.hasComponent(changed.instance)));
            if (!defaultChanged) {
                _.assign(defaultValueComponent.component, _.omit(component, [
                    'key',
                    'label',
                    'placeholder',
                    'tooltip',
                    'hidden',
                    'autofocus',
                    'validate',
                    'disabled',
                    'defaultValue',
                    'customDefaultValue',
                    'customDefaultValueVariable',
                    'calculateValue',
                    'calculateValueVariable',
                    'conditional',
                    'customConditional',
                    'validations',
                ]));
                defaultValueComponent.component.config = this.options.formConfig || {};
                defaultValueComponent.rebuild();
            }
            else {
                this.preview._data[changed.instance._data.key] = changed.value;
                this.webform._data[changed.instance._data.key] = changed.value;
            }
        }
        // Called when we update a component.
        this.emit('updateComponent', component);
    };
    WebformBuilder.prototype.editBuildingForm = function editBuildingForm(isJsonEdit) {
        var _this = this;
        if (this.dialog) {
            this.dialog.close();
        }
        if (this.editForm) {
            this.editForm.destroy();
        }
        if (this.preview) {
            this.preview.destroy();
        }
        var editFormOptions = _.clone(_.get(this, 'options.editForm', {}));
        editFormOptions.editForm = this.form;
        this.editForm = new Webform(__assign(__assign(__assign({}, _.omit(this.options, ['hooks', 'builder', 'events', 'attachMode', 'skipInit'])), { language: this.options.language }), editFormOptions));
        this.getNestedComponentsMap();
        this.editForm.pathComponentsMapping = this.pathComponentsMapping;
        this.editForm.arrayDataComponentPaths = this.arrayDataComponentPaths;
        this.editForm.nestedDataComponents = this.nestedDataComponents;
        this.editForm.arrayDataComponents = this.arrayDataComponents;
        this.editForm.parentPath = '';
        this.editForm.form = isJsonEdit ? {
            components: [
                {
                    type: 'textarea',
                    as: 'json',
                    editor: 'ace',
                    weight: 10,
                    input: true,
                    key: 'componentJson',
                    label: 'Component JSON',
                    tooltip: 'Edit the JSON for this component.'
                }
            ]
        } : this.constructor.editForm();
        var form = _.cloneDeep(this.form);
        this.editForm.submission = isJsonEdit ? {
            data: {
                componentJson: form,
            },
        } : {
            data: form,
        };
        this.componentEdit = this.ce('div', { 'class': 'component-edit-container' });
        this.setContent(this.componentEdit, this.renderTemplate('builderFormEditForm', {
            editForm: this.editForm.render(),
        }));
        this.dialog = this.createModal(this.componentEdit, _.get(this.options, 'dialogAttr', {}));
        this.editForm.attach(this.componentEdit.querySelector('[ref="editForm"]'));
        var cancelButtons = this.componentEdit.querySelectorAll('[ref="cancelButton"]');
        cancelButtons.forEach(function (cancelButton) {
            _this.addEventListener(cancelButton, 'click', function (event) {
                event.preventDefault();
                _this.editForm.detach();
                _this.dialog.close();
                _this.emit('cancelFormEditForm', _this.form);
            });
        });
        var saveButtons = this.componentEdit.querySelectorAll('[ref="saveButton"]');
        saveButtons.forEach(function (saveButton) {
            _this.addEventListener(saveButton, 'click', function (event) {
                event.preventDefault();
                if (!_this.editForm.checkValidity(_this.editForm.data, true, _this.editForm.data)) {
                    _this.editForm.setPristine(false);
                    _this.editForm.showErrors();
                    return false;
                }
                var newFormSchema = isJsonEdit ? _this.editForm.data.componentJson : _this.editForm.data;
                _this.editForm.detach();
                _this.dialog.close();
                _this.form = newFormSchema;
                _this.emit('saveFormEditForm', newFormSchema);
                _this.emit('change', _this.form);
            });
        });
        var dialogClose = function () {
            _this.editForm.destroy();
            // Clean up.
            _this.removeEventListener(_this.dialog, 'close', dialogClose);
            _this.dialog = null;
        };
        this.addEventListener(this.dialog, 'close', dialogClose);
        // Called when we edit a component.
        this.emit('editFormEditForm', this.form);
    };
}
var originalInit = WebformBuilder.prototype.init;
WebformBuilder.prototype.init = function init() {
    var _this = this;
    var superInit = originalInit.call(this);
    this.options.hooks = this.options.hooks || {};
    this.options.hooks.renderComponentFormTemplate = function (template) {
        return _this.renderTemplate('builderForm', {
            html: template,
        });
    };
    this.options.hooks.attachWebform = function (element, component) {
        component.loadRefs(element, {
            editForm: 'single',
            editFormJson: 'single',
        });
        var tooltips = {
            edit: null,
            json: null,
        };
        if (component.refs.editForm) {
            tooltips.edit = new Tooltip(component.refs.editForm, {
                trigger: 'hover',
                placement: 'top',
                title: _this.t('Edit'),
            });
            component.addEventListener(component.refs.editForm, 'click', function () { return _this.editBuildingForm(); });
        }
        if (component.refs.editFormJson) {
            tooltips.json = new Tooltip(component.refs.editFormJson, {
                trigger: 'hover',
                placement: 'top',
                title: _this.t('Edit JSON'),
            });
            component.addEventListener(component.refs.editFormJson, 'click', function () {
                _this.editBuildingForm(true);
            });
        }
        return tooltips;
    };
    this.options.hooks.editComponentParentInstance = function (editFormOptions, parent) {
        editFormOptions.editComponentParentInstance = parent.formioComponent;
    };
    this.options.hooks.editFormProperties = function (parent) {
        var _a;
        _this.getNestedComponentsMap();
        _this.editForm.pathComponentsMapping = _this.pathComponentsMapping;
        _this.editForm.arrayDataComponentPaths = _this.arrayDataComponentPaths;
        _this.editForm.nestedDataComponents = _this.nestedDataComponents;
        _this.editForm.arrayDataComponents = _this.arrayDataComponents;
        _this.editForm.parentPath = (_a = parent === null || parent === void 0 ? void 0 : parent.formioComponent) === null || _a === void 0 ? void 0 : _a.path;
        _this.editForm.on('editGridSaveRow', function (_a) {
            var component = _a.component, row = _a.row, instance = _a.instance;
            var helperName = EditFormUtils.defineHelper(component.key);
            if (helperName && row) {
                var helpers = _this.editForm.getComponent(helperName + "s");
                var helperGrid = instance;
                var helper = helperGrid.parent.components.find(function (comp) { return comp.key === component.helperValueKey; });
                helper.setValue(row.key);
                if (!helperGrid.editHelper) {
                    helpers.dataValue.push(row);
                }
                else {
                    _.assign(helperGrid.editHelper, row);
                }
                helperGrid.hideFromEditing = true;
                helperGrid.editHelper = null;
                helperGrid.helperEditing = false;
                helperGrid.parent.checkConditions();
                helpers.rebuild();
            }
        });
        _this.editForm.on('editGridCancelRow', function (_a) {
            var component = _a.component, instance = _a.instance;
            if (EditFormUtils.defineHelper(component.key)) {
                var helperGrid = instance;
                helperGrid.hideFromEditing = true;
                helperGrid.editHelper = false;
                helperGrid.helperEditing = false;
                helperGrid.parent.checkConditions();
            }
        });
    };
    this.options.hooks.instanceOptionsPreview = function (instanceOptions) {
        instanceOptions.preview = true;
    };
    this.options.hooks.beforeSaveComponentSettings = function (compSettings) {
        var helpingSettings = [
            {
                location: compSettings,
                settings: ['editCondition', 'deleteCondition', 'editVariable', 'deleteVariable']
            },
            {
                location: (compSettings === null || compSettings === void 0 ? void 0 : compSettings.validations) || null,
                expectArray: true,
                settings: ['deleteCondition', 'editCondition', 'precreatedTemplatesWrapper', 'conditionGrid']
            }
        ];
        _.each(helpingSettings, function (_a) {
            var location = _a.location, settings = _a.settings, expectArray = _a.expectArray;
            if (expectArray && _.isArray(location)) {
                _.each(location, function (item) {
                    _.each(settings, function (setting) { return _.unset(item, setting); });
                });
            }
            else if (location) {
                _.each(settings, function (setting) { return _.unset(location, setting); });
            }
        });
    };
    this.options.hooks.previewFormSettitngs = function (schema, isJsonEdit) {
        if (isJsonEdit) {
            _this.preview = null;
        }
        else {
            _this.preview.form = {
                components: [
                    {
                        key: 'tabs',
                        type: 'tabs',
                        hideHeader: true,
                        components: _this.editForm.form.components[0].components.map(function (_a) {
                            var label = _a.label, key = _a.key, sidebar = _a.sidebar;
                            return ({
                                label: label,
                                key: key,
                                components: (sidebar !== null && sidebar !== void 0 ? sidebar : []).map(function (component) { return (_.isFunction(component) ? component(schema) : component); }),
                            });
                        }),
                    },
                ],
            };
            _this.preview.componentEditForm = _this.editForm;
        }
    };
    this.options.hooks.editFormWrapper = function () {
        if (_this.preview) {
            _this.preview.attach(_this.componentEdit.querySelector('[ref="sidebarForm"]'));
        }
        _this.editFormWrapper = _this.componentEdit.querySelector('[ref="editFormWrapper"]');
        _this.sidebarFormWrapper = _this.componentEdit.querySelector('[ref="sidebarFormWrapper"]');
    };
    this.options.hooks.builderComponentSchema = function (component, instance) {
        return instance.component;
    };
    return superInit;
};
export default Builders.builders;
