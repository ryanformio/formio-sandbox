import { BaseEntity } from './validators/BaseEntity';
import { BaseCalculatableEntity } from './validators/BaseCalculatableEntity';
import { Conjunction } from './validators/conjunctions/Conjunction';
import { QuickRule } from './validators/quickRules/QuickRule';
import { Operator } from './validators/operators/Operator';
import { BaseReduceTransformer } from './validators/transformers/BaseReduce';
import { IterateeTransformer } from './validators/transformers/Iteratee';
import { Transformer } from './validators/transformers/Transformer';
import { ValueSource } from './validators/valueSources/ValueSource';
export * from './utils/utils';
export declare const Abstract: {
    BaseCalculatableEntity: typeof BaseCalculatableEntity;
    BaseEntity: typeof BaseEntity;
    BaseReduceTransformer: typeof BaseReduceTransformer;
    Conjunction: typeof Conjunction;
    IterateeTransformer: typeof IterateeTransformer;
    QuickRule: typeof QuickRule;
    Operator: typeof Operator;
    Transformer: typeof Transformer;
    ValueSource: typeof ValueSource;
};
declare const rulesEngine: {
    conjunctions: {};
    operators: {};
    quickRules: {};
    transformers: {};
    valueSources: {};
    components: {
        component: any;
        nested: any;
        panel: any;
        number: any;
    };
    builders: any;
    templates: {
        bootstrap: {
            builderForm: {
                form: string;
            };
            builderFormEditForm: {
                form: string;
            };
            builderEditForm: {
                form: string;
            };
            builderComponent: {
                form: string;
            };
            tab: {
                flat: string;
                form: string;
            };
        };
        bootstrap3: {
            builderForm: {
                form: string;
            };
            builderFormEditForm: {
                form: string;
            };
            builderEditForm: {
                form: string;
            };
            builderComponent: {
                form: string;
            };
            tab: {
                flat: string;
                form: string;
            };
        };
    };
} | {
    conjunctions?: undefined;
    operators?: undefined;
    quickRules?: undefined;
    transformers?: undefined;
    valueSources?: undefined;
    components?: undefined;
    builders?: undefined;
    templates?: undefined;
};
export default rulesEngine;
