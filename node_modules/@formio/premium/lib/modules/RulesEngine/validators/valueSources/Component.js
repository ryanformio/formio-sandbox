var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ValueSource } from './ValueSource';
import { getAllContextComponents } from '../../utils/utils';
var ComponentValueSource = /** @class */ (function (_super) {
    __extends(ComponentValueSource, _super);
    function ComponentValueSource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ComponentValueSource, "itemName", {
        get: function () {
            return 'component';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComponentValueSource, "title", {
        get: function () {
            return 'Component';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ComponentValueSource, "weight", {
        get: function () {
            return 100;
        },
        enumerable: false,
        configurable: true
    });
    ComponentValueSource.getInputEditForm = function (options) {
        return {
            label: 'Container',
            type: 'container',
            input: true,
            components: [{
                    label: 'Component',
                    widget: 'choicesjs',
                    key: 'componentPath',
                    dataSrc: 'custom',
                    valueProperty: 'value',
                    validate: { required: true },
                    type: 'select',
                    data: {
                        custom: function (context) {
                            return getAllContextComponents(context);
                        }
                    },
                    input: true,
                },
            ],
        };
    };
    ComponentValueSource.prototype.getValue = function (_a) {
        var _b, _c;
        var componentPath = _a.componentPath;
        return (_c = (_b = this.formInstance) === null || _b === void 0 ? void 0 : _b.getComponent(componentPath)) !== null && _c !== void 0 ? _c : null;
    };
    return ComponentValueSource;
}(ValueSource));
export { ComponentValueSource };
