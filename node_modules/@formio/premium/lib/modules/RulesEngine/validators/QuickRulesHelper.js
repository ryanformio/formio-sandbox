// TODO: share this with EditGrid.
var EditRowState = {
    New: 'new',
    Editing: 'editing',
    Saved: 'saved',
    Removed: 'removed',
};
var QuickRulesHelper = /** @class */ (function () {
    function QuickRulesHelper(editForm, options) {
        this.editForm = editForm;
        this.options = options;
        this.variables = this.editForm.getComponent('variables');
        this.conditions = this.editForm.getComponent('conditions');
        this.validations = this.editForm.getComponent('validations');
        this.queue = [];
    }
    QuickRulesHelper.prototype.rowIndex = function (index) {
        this.index = index;
    };
    QuickRulesHelper.prototype.makeHelperKeyUnique = function (helperGrid, key, start) {
        if (start === void 0) { start = 0; }
        if (helperGrid.dataValue.some(function (row) { return row.key === key; })) {
            key = key + start;
            this.makeHelperKeyUnique(helperGrid, key, start + 1);
        }
        return key;
    };
    QuickRulesHelper.prototype.makeVariableKeyUnique = function (key) {
        return this.makeHelperKeyUnique(this.variables, key, 0);
    };
    QuickRulesHelper.prototype.makeConditonKeyUnique = function (key) {
        return this.makeHelperKeyUnique(this.conditions, key, 0);
    };
    QuickRulesHelper.prototype.addVariable = function (variable) {
        var _this = this;
        this.queue.push(function () { return _this.addEditGridValue(_this.variables, variable); });
        return this;
    };
    QuickRulesHelper.prototype.addCondition = function (condition) {
        var _this = this;
        this.queue.push(function () { return _this.addEditGridValue(_this.conditions, condition); });
        return this;
    };
    QuickRulesHelper.prototype.addValidation = function (validation) {
        var _this = this;
        this.queue.push(function () { return _this.addValidationEditGridValue(_this.validations, validation); });
        return this;
    };
    QuickRulesHelper.prototype.addEditGridValue = function (editGrid, value) {
        editGrid.dataValue.push(value);
        var editRow = {
            components: [],
            data: value,
            state: EditRowState.Saved,
            backup: null,
            error: null,
        };
        editGrid.editRows.push(editRow);
        editGrid.redraw();
        return editRow;
    };
    QuickRulesHelper.prototype.addValidationEditGridValue = function (editGrid, value) {
        editGrid.root.setPristine(true);
        var row = editGrid.editRows[this.index];
        var validationContainer = row.components.find(function (comp) { return comp.component.key === 'container-ui'; }).getComponent('validationContainer');
        validationContainer.setValue(value);
        return row;
    };
    QuickRulesHelper.prototype.execute = function () {
        var result = this.queue.map(function (handler) { return handler(); });
        this.queue = [];
        return result;
    };
    return QuickRulesHelper;
}());
export default QuickRulesHelper;
