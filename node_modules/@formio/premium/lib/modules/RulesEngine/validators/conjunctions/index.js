var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { AndConjunction } from './And';
import { AndNotConjunction } from './AndNot';
import { OrNotConjunction } from './OrNot';
import { OrConjunction } from './Or';
import { NotConjunction } from './Not';
import { Formio } from 'formiojs';
var conjunctions = [
    AndConjunction,
    AndNotConjunction,
    OrNotConjunction,
    OrConjunction,
    NotConjunction,
].reduce(function (result, valueSource) {
    var _a;
    return (__assign(__assign({}, result), (_a = {}, _a[valueSource.itemName] = valueSource, _a)));
}, {});
if (Formio.rulesEntities) {
    Formio.rulesEntities.Conjunctions.addConjunctions(conjunctions);
}
export default conjunctions;
