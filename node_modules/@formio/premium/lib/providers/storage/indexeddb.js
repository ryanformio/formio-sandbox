import { Formio } from 'formiojs';
import { v4 as uuidv4 } from 'uuid';
var IndexedDB = /** @class */ (function () {
    function IndexedDB(formio) {
        this.formio = formio;
    }
    IndexedDB.prototype.uploadFile = function (file, fileName, dir, progressCallback, url, options) {
        var _this = this;
        if (!('indexedDB' in window)) {
            /* tslint:disable */
            console.log('This browser doesn\'t support IndexedDB');
            /* tslint:enable */
            return;
        }
        return new Formio.Promise(function (resolve) {
            var request = indexedDB.open(options.indexeddb, 3);
            request.onsuccess = function (event) {
                var db = event.target.result;
                resolve(db);
            };
            request.onupgradeneeded = function (e) {
                var db = e.target.result;
                db.createObjectStore(options.indexeddbTable);
            };
        }).then(function (db) {
            var reader = new FileReader();
            return new Formio.Promise(function (resolve, reject) {
                reader.onload = function () {
                    var blobObject = new Blob([file], { type: file.type });
                    var id = uuidv4(blobObject);
                    var data = {
                        id: id,
                        data: blobObject,
                        name: file.name,
                        size: file.size,
                        type: file.type,
                        url: url,
                    };
                    var trans = db.transaction([options.indexeddbTable], 'readwrite');
                    var addReq = trans.objectStore(options.indexeddbTable).put(data, id);
                    addReq.onerror = function (e) {
                        /* tslint:disable */
                        console.log('error storing data');
                        console.error(e);
                        /* tslint:enable */
                    };
                    trans.oncomplete = function () {
                        resolve({
                            storage: 'indexeddb',
                            name: file.name,
                            size: file.size,
                            type: file.type,
                            url: url,
                            id: id,
                        });
                    };
                };
                reader.onerror = function () {
                    return reject(_this);
                };
                reader.readAsDataURL(file);
            });
        });
    };
    IndexedDB.prototype.downloadFile = function (file, options) {
        var _this = this;
        return new Formio.Promise(function (resolve) {
            var request = indexedDB.open(options.indexeddb, 3);
            request.onsuccess = function (event) {
                var db = event.target.result;
                resolve(db);
            };
        }).then(function (db) {
            return new Formio.Promise(function (resolve, reject) {
                var trans = db.transaction([options.indexeddbTable], 'readonly');
                var store = trans.objectStore(options.indexeddbTable).get(file.id);
                store.onsuccess = function () {
                    trans.oncomplete = function () {
                        var result = store.result;
                        var dbFile = new File([store.result.data], file.name, {
                            type: store.result.type,
                        });
                        var reader = new FileReader();
                        reader.onload = function (event) {
                            result.url = event.target.result;
                            resolve(result);
                        };
                        reader.onerror = function () {
                            return reject(_this);
                        };
                        reader.readAsDataURL(dbFile);
                    };
                };
                store.onerror = function () {
                    return reject(_this);
                };
            });
        });
    };
    IndexedDB.title = 'IndexedDB';
    return IndexedDB;
}());
export default IndexedDB;
