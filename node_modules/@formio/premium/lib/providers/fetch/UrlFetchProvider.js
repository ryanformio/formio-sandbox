var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as _ from 'lodash';
import { Formio } from 'formiojs';
import { FetchProvider } from './FetchProvider';
var UrlFetchProvider = /** @class */ (function (_super) {
    __extends(UrlFetchProvider, _super);
    function UrlFetchProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UrlFetchProvider, "key", {
        get: function () {
            return 'url';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UrlFetchProvider, "displayName", {
        get: function () {
            return 'URL';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UrlFetchProvider, "availableToSourceOptions", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    UrlFetchProvider.prototype.serialize = function (params) {
        var _this = this;
        if (!params || !_.isPlainObject(params)) {
            return '';
        }
        return _.chain(params).map(function (value, key) {
            return _.isArray(value)
                ? _.chain(value).map(function (paramValue) { return _this.getParam(key, paramValue); }).join('&').value()
                : _this.getParam(key, value);
        }).join('&').value();
    };
    UrlFetchProvider.prototype.updatedComparedValue = function (comparedValue) {
        if (_.isString(comparedValue)) {
            return comparedValue.split('').map(function (i) { return ['(', ')'].includes(i) ? '\\' + i : i; }).join('');
        }
        return comparedValue;
    };
    UrlFetchProvider.prototype.getParam = function (name, paramValue) {
        var isFiltering = _.isPlainObject(paramValue) && paramValue.hasOwnProperty('value') && paramValue.hasOwnProperty('comparedValue');
        var param = { key: '', value: '' };
        if (isFiltering) {
            var value = paramValue.value, comparedValue = paramValue.comparedValue;
            switch (name) {
                case 'equal':
                    param = { key: value, value: comparedValue };
                    break;
                case 'notEqual':
                    param = { key: value + '__ne', value: comparedValue };
                    break;
                case 'startsWith':
                    param = { key: value + '__regex', value: '/^' + this.updatedComparedValue(comparedValue) + '/i' };
                    break;
                case 'contain':
                    param = { key: value + '__regex', value: '/' + this.updatedComparedValue(comparedValue) + '/i' };
                    break;
                case 'notContain':
                    param = { key: value + '__regex', value: '/^((?!' + this.updatedComparedValue(comparedValue) + ').)*$/i' };
                    break;
                case 'endsWith':
                    param = { key: value + '__regex', value: '/' + this.updatedComparedValue(comparedValue) + '$/i' };
                    break;
                case 'matches':
                    param = { key: value + '__regex', value: comparedValue };
                    break;
                // greater than
                case 'gt':
                    param = { key: value + '__gt', value: comparedValue };
                    break;
                // greater than or equal to
                case 'gte':
                    param = { key: value + '__gte', value: comparedValue };
                    break;
                // less than
                case 'lt':
                    param = { key: value + '__lt', value: comparedValue };
                    break;
                // less than or equal to
                case 'lte':
                    param = { key: value + '__lte', value: comparedValue };
                    break;
                case 'exists':
                    param = { key: value + '__exists', value: comparedValue };
                    break;
                default:
                    param = { key: value, value: comparedValue };
            }
        }
        else {
            switch (name) {
                case 'sort':
                    var sortValue = paramValue.value, asc = paramValue.asc;
                    param = { key: 'sort', value: "" + (asc ? '' : '-') + sortValue };
                    break;
                case 'limit':
                    param = { key: 'limit', value: paramValue };
                    break;
                case 'skip':
                    param = { key: 'skip', value: paramValue };
                    break;
                default:
                    param = { key: name, value: paramValue };
            }
        }
        return encodeURIComponent(param.key) + '=' + encodeURIComponent(param.value);
    };
    UrlFetchProvider.prototype.getRequestHeaders = function () {
        var headers = new Formio.Headers();
        if (!_.isEmpty(this.options.headers)) {
            try {
                _.each(this.options.headers, function (header) {
                    if (header.key) {
                        headers.set(header.key, header.value);
                    }
                });
            }
            catch (err) {
                /* tslint:disable */
                console.warn(err.message);
                /* tslint:enable */
            }
        }
        return headers;
    };
    UrlFetchProvider.prototype.getRequestUrl = function (params) {
        if (params === void 0) { params = {}; }
        var url = this.options.url;
        if (!url) {
            /* tslint:disable */
            console.warn('URL is not defined in URL Fetch Provider.');
            /* tslint:enable */
            return '';
        }
        var paramsString = this.serialize(params);
        var _a = _.split(url, '?'), baseUrl = _a[0], defaultQueryString = _a[1];
        return baseUrl + "?" + paramsString + (paramsString && defaultQueryString ? '&' : '') + (defaultQueryString || '');
    };
    UrlFetchProvider.prototype.makeRequest = function (params) {
        var _a = this.options, method = _a.method, body = _a.body, addFormioToken = _a.addFormioToken, ignoreCache = _a.ignoreCache;
        var requestUrl = this.getRequestUrl(params);
        if (!requestUrl) {
            return Formio.Promise.resolve();
        }
        // returns array: [0] - response data, property serverCount - taken from response headers if provided.
        return Formio.makeStaticRequest(requestUrl, method, body, {
            headers: this.getRequestHeaders(),
            noToken: !addFormioToken,
            ignoreCache: ignoreCache
        });
    };
    UrlFetchProvider.prototype.getData = function (params) {
        params = params || {};
        return this.makeRequest(params);
    };
    return UrlFetchProvider;
}(FetchProvider));
export { UrlFetchProvider };
