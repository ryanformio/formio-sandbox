var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Displays, Utils } from 'formiojs';
var OriginalWizard = Displays.displays.wizard;
var Wizard = /** @class */ (function (_super) {
    __extends(Wizard, _super);
    function Wizard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Wizard.prototype.emitWizardPageSelected = function (index) {
        this.setChangingMode();
        this.emit('wizardPageSelected', this.pages[index], index);
    };
    Wizard.prototype.emitNextPage = function () {
        this.setChangingMode();
        this.emit('nextPage', { page: this.page, submission: this.submission });
    };
    Wizard.prototype.emitPrevPage = function () {
        this.setChangingMode();
        this.emit('prevPage', { page: this.page, submission: this.submission });
    };
    Wizard.prototype.focusOnComponent = function (key) {
        var superFocusOnComponent = _super.prototype.focusOnComponent.call(this, key);
        var dynamicWizardComponent = this.hasDynamicWizard();
        if (dynamicWizardComponent) {
            var component = this.getComponent(key);
            dynamicWizardComponent.switchToStep(component);
        }
        else if (this.element && this.element.classList.contains('dynamicWizard-changingMode')) {
            this.element.classList.remove('dynamicWizard-changingMode');
        }
        return superFocusOnComponent;
    };
    Wizard.prototype.hasButton = function (name, nextPage) {
        if (nextPage === void 0) { nextPage = this.getNextPage(); }
        // get page options with global options as default values
        var _a = Utils._.get(this.currentPage, 'component.buttonSettings', {}), _b = _a.previous, previous = _b === void 0 ? this.options.buttonSettings.showPrevious : _b, _c = _a.cancel, cancel = _c === void 0 ? this.options.buttonSettings.showCancel : _c, _d = _a.submit, submit = _d === void 0 ? this.options.buttonSettings.showSubmit : _d, _e = _a.next, next = _e === void 0 ? this.options.buttonSettings.showNext : _e;
        var dynamicWizardComponent = this.hasDynamicWizard();
        var isDynamicWizardNotActive = !(dynamicWizardComponent === null || dynamicWizardComponent === void 0 ? void 0 : dynamicWizardComponent.isChangingMode) || !dynamicWizardComponent.hasComponents;
        var showNavButtons = isDynamicWizardNotActive || this.options.readOnly;
        switch (name) {
            case 'previous':
                return previous && (this.getPreviousPage() > -1) && showNavButtons;
            case 'next':
                return next && (nextPage !== null) && (nextPage !== -1) && showNavButtons;
            case 'cancel':
                return cancel && !this.options.readOnly && showNavButtons;
            case 'submit':
                return submit && !this.options.readOnly && ((nextPage === null) || (this.page === (this.pages.length - 1))) && isDynamicWizardNotActive;
            default:
                return true;
        }
    };
    Wizard.prototype.setEditMode = function (submission) {
        if (!this.editMode && submission._id && !this.options.readOnly) {
            this.editMode = true;
            var dynamicWizard = this.hasDynamicWizard();
            if (dynamicWizard) {
                dynamicWizard.shouldUpdate = false;
                dynamicWizard.isChangingMode = false;
            }
            this.redraw();
        }
    };
    Wizard.prototype.setChangingMode = function () {
        if (this.options.readOnly) {
            return;
        }
        var dynamicWizard = this.hasDynamicWizard();
        // If the current page contains dynamicWizard component
        if (dynamicWizard && !this.editMode && dynamicWizard.hasComponents) {
            if (dynamicWizard.shouldUpdate) {
                dynamicWizard.addRow();
                dynamicWizard.shouldUpdate = false;
                dynamicWizard.secondRender = true;
            }
            if (this.element && !this.element.classList.contains('dynamicWizard-changingMode')) {
                // helps to return nearby components, if validation.maxLength is occurred
                if ((dynamicWizard === null || dynamicWizard === void 0 ? void 0 : dynamicWizard.editRows.length) === Utils._.get(dynamicWizard === null || dynamicWizard === void 0 ? void 0 : dynamicWizard.component, 'validate.maxLength')
                    && !dynamicWizard.isOpen(dynamicWizard.editRows[dynamicWizard.changingRowIndex])) {
                    return;
                }
                this.element.classList.add('dynamicWizard-changingMode');
                this.redraw();
            }
        }
        else if (this.element) {
            if ((dynamicWizard === null || dynamicWizard === void 0 ? void 0 : dynamicWizard.isChangingMode) && dynamicWizard.hasComponents) {
                dynamicWizard.isChangingMode = false;
                this.redraw();
            }
            if (this.element.classList.contains('dynamicWizard-changingMode')) {
                this.element.classList.remove('dynamicWizard-changingMode');
            }
        }
    };
    Wizard.prototype.hasDynamicWizard = function () {
        var _a;
        return (_a = this.currentPage) === null || _a === void 0 ? void 0 : _a.components.find(function (comp) { return comp.component.type === 'dynamicWizard' && comp._parentVisible && comp._visible && !comp._disabled; });
    };
    Wizard.prototype.updatePages = function () {
        this.pages = this.allPages;
        var dynamicWizardComponent = this.hasDynamicWizard();
        if (this.element && this.element.classList.contains('dynamicWizard-changingMode') && !dynamicWizardComponent) {
            this.element.classList.remove('dynamicWizard-changingMode');
        }
    };
    return Wizard;
}(OriginalWizard));
export default Wizard;
